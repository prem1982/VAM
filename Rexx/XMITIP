        /* ---------------------  rexx procedure  ------------------- */        
       ver = "4.46"                                                             
        /* Name:      XMITIP                                          *         
         *                                                            *         
         * Function:  Transmit a message to a user on the LAN via     *         
         *            using the Internet gateway                      *         
         *                                                            *         
         * Syntax:    %XMITIP user@node  option......                 *         
         *                                                            *         
         *            where:                                          *         
         *                                                            *         
         *            user@node                                       *         
         *              e-mail address of the recipient               *         
         *            or                                              *         
         *            (user@node user2@node ...)                      *         
         *            or                                              *         
         *            "first last" <first.last@address>               *         
         *            or                                              *         
         *            ("first last" <first.last@address> ...)         *         
         *            or                                              *         
         *            *list-id*  (not an address but used in the TO   *         
         *            tag in the envelope with BCC for addressing.    *         
         *            List-id need only start with an *               *         
         *            or                                              *         
         *            'list id'                                       *         
         *            text enclosed in single or double quotes which  *         
         *            will be used as the to address in the           *         
         *            envelope (but not for smtp delivery)            *         
         *            or                                              *         
         *            * if using an AddressFile/AddressFileDD which   *         
         *            will cause the * to be replaced by the TO       *         
         *            addresses in the AddressFile.                   *         
         *                                                            *         
         *            CC user@node                                    *         
         *              e-mail address of the recipient               *         
         *              specifies 'carbon copy' recipients            *         
         *              (note the space after CC)                     *         
         *            or                                              *         
         *            CC (user@node user2@node ...)                   *         
         *            or                                              *         
         *            CC "first last" <first.last@address>            *         
         *            or                                              *         
         *            CC ("first last" <first.last@address> ...)      *         
         *                                                            *         
         *            BCC user@node                                   *         
         *              specifies 'blind carbon copy' recipients      *         
         *              (note the space after BCC)                    *         
         *              These addresses will NOT be in the message    *         
         *              envelope.                                     *         
         *            or                                              *         
         *            BCC (user@node user2@node ...)                  *         
         *            or                                              *         
         *            BCC "first last" <first.last@address>           *         
         *            or                                              *         
         *            BCC ("first last" <first.last@address> ...)     *         
         *                                                            *         
         *            AddressFile dsname                              *         
         *              Defines a dataset that contains               *         
         *              a sequential list of addresses in the form:   *         
         *              TO address                                    *         
         *              CC address                                    *         
         *              BCC address                                   *         
         *              * comment                                     *         
         *              Note: only 1 address per record in col 1-72.  *         
         *              address can be of the format:                 *         
         *              first.last@address                            *         
         *              or                                            *         
         *              "first last" <first.last@address>             *         
         *                                                            *         
         *            AddressFileDD ddname                            *         
         *              Defines a ddname that contains                *         
         *              a sequential list of addresses in the form:   *         
         *              TO address                                    *         
         *              CC address                                    *         
         *              BCC address                                   *         
         *              * comment                                     *         
         *              Note: only 1 address per record in col 1-72.  *         
         *              address can be of the format:                 *         
         *              first.last@address                            *         
         *              or                                            *         
         *              "first last" <first.last@address>             *         
         *                                                            *         
         *            ASA                                             *         
         *              Converts ASA carriage controls to Form Feed   *         
         *                etc. as are used on ASCII printers.         *         
         *              This works with the REPORT option.            *         
         *              (defaults if RECFM indicates ASA carriage     *         
         *               control)                                     *         
         *            MACH                                            *         
         *              Converts MACH carriage controls to Form Feed  *         
         *                etc. as are used on ASCII printers.         *         
         *              This works with the REPORT option.            *         
         *              (defaults if RECFM indicates MACH carriage    *         
         *               control)                                     *         
         *                                                            *         
         *            DEBUG - do not send but echo output via say     *         
         *                                                            *         
         *            FILE dataset.to.be.attached or                  *         
         *            FILE (dsn1 dsn2 ....)                           *         
         *              sequential dataset to be sent as an attachment*         
         *                                                            *         
         *              if the dataset starts with an * then the dsn  *         
         *              will be allocated and ISPF Edit opened on it  *         
         *                                                            *         
         *              Note: gdg's are supported.                    *         
         *                                                            *         
         *            FILEDD ddname or                                *         
         *            FILEDD (ddn1 ddn2 ...)                          *         
         *              a ddname(s) used instead of or in addition to *         
         *              the FILE keyword to reference datasets via    *         
         *              a JCL //xx DD statement.                      *         
         *                                                            *         
         *            FILEO hfs-file-name                             *         
         *            FILEO (hfs-1 hfs-2 ...)                         *         
         *              a hfs file is used                            *         
         *                                                            *         
         *            FILEDESC description-of-file or                 *         
         *            FILEDESC (desc-file1 desc-file2 ...)            *         
         *              Descriptions of the attached files without    *         
         *              imbedded blanks.                              *         
         *              - a filedesc of x (or X) may be used when     *         
         *                multiple files are attached and one or      *         
         *                more do not have a description.             *         
         *                e.g filedesc (x file-desc x file-desc)      *         
         *                                                            *         
         *            FILENAME or                                     *         
         *            FILENAME (file1 file2 ...)                      *         
         *            the name of the file attachment that will       *         
         *            appear in the e-mail.                           *         
         *                                                            *         
         *            Note: Filename may contain one of these         *         
         *                  variables:                                *         
         *                  &date      yyyymmdd                       *         
         *                  &jdate     yyddd                          *         
         *                  &sdate     mmdd                           *         
         *                  &job       jobname                        *         
         *            e.g report.&sdate.rtf                           *         
         *                                                            *         
         *            FORMAT - the format of the file attachment      *         
         *            FORMAT xxx or .xxx                              *         
         *                   xxx = file attachment suffix             *         
         *            FORMAT TXT/suffix                               *         
         *                    plain text attachment (default)         *         
         *                    suffix is the file attachment suffix    *         
         *                        (e.g. csv, txt, html, ...)          *         
         *            FORMAT BIN/suffix                               *         
         *                    suffix is the file attachment suffix    *         
         *                        (e.g. xmit or .xmit)                *         
         *            FORMAT HTML/color/suffix/font-size              *         
         *                   color is documented below (after FORMAT) *         
         *                   suffix is the file attachment suffix     *         
         *                       (e.g. xls or .xls)                   *         
         *                   font-size (default is null for browser)  *         
         *                       values from 1 (very small)           *         
         *                              to 7 (very large)             *         
         *            FORMAT PDF/layout/font/paper/lpi                *         
         *                   layout is Landscape (11x8.5)             *         
         *                             Portrait  (8.5x11)             *         
         *                             - default is Portrait          *         
         *                   font is a font size where 72 points      *         
         *                        is one inch (default is 9)          *         
         *                   paper is LETter for Letter (8.5 x 11)    *         
         *                            LEGal for Legal (11x14)         *         
         *                            A4 for A4 (European paper)      *         
         *                               (8.27 x 11.7)                *         
         *                   lpi is lines per inch (default is 6)     *         
         *            FORMAT RTF/layout/font/paper/suffix             *         
         *                   layout is Landscape (11x8.5)             *         
         *                             Portrait  (8.5x11)             *         
         *                             - default is Portrait          *         
         *                   font is a font size where 72 points      *         
         *                        is one inch (default is 9)          *         
         *                   paper is LETter for Letter (8.5 x 11)    *         
         *                            LEGal for Legal (11x14)         *         
         *                            A4 for A4 (European paper)      *         
         *                            or                              *         
         *                            widthXheight (e.g. 4x6)         *         
         *                   suffix is the file attachment suffix     *         
         *                       (default is .rtf)                    *         
         *            FORMAT ZIP/name-in-archive                      *         
         *                   to zip a text file                       *         
         *                   name-in-archive is the name the file     *         
         *                        will have in the zip file           *         
         *            FORMAT ZIPBIN/name-in-archive                   *         
         *                   to zip a binary file                     *         
         *            FORMAT ZIPHTML/name-in-archive/color/font-size  *         
         *                   to convert the file to HTML and then     *         
         *                   zip the file                             *         
         *            FORMAT ZIPPDF/nia/layout/font/paper/lpi         *         
         *                   to convert the file to PDF and then      *         
         *                   zip the file                             *         
         *            FORMAT ZIPRTF/name-in-archive/layout/font/paper *         
         *                   to convert the file to RTF and then      *         
         *                   zip the file                             *         
         *                                                            *         
         *            Color definitions for HTML attachments          *         
         *                   If color is just color then it is the    *         
         *                   text color with a white background.      *         
         *                   If color is color-color then the first   *         
         *                   color is the background color and the    *         
         *                   second color is the text color           *         
         *                                                            *         
         *                   Color      Abbrev   Color     Abbrev     *         
         *                   Aqua       A        Navy      N          *         
         *                   Black      Bla      Olive     O          *         
         *                   Blue       Blu      Purple    P          *         
         *                   Fuchsia    F        Red       R          *         
         *                   Gray      Gra       Silver    S          *         
         *                   Green     Gre       Teal      T          *         
         *                   Lime      L         White     W          *         
         *                   Maroon    M         Yellow    Y          *         
         *                                                            *         
         *            - Each set applies to the relative FILE dsn or  *         
         *              FILEDD ddname or FILEO file.                            
         *              If FILE and FILEDD and FILEO are coded        *         
         *              then the dsn's are counted first from         *         
         *              FILE and then FILEDD and then FILEO.          *         
         *                                                            *         
         *            FROM from.mail.address@node                     *         
         *            or                                              *         
         *            FROM "from name" <from.name@address>            *         
         *              specifies the return mail address             *         
         *              (see REPLYTO keyword)                         *         
         *                                                            *         
         *            HLQ hlq                                         *         
         *              High level qualifier to be used for all       *         
         *              dataset allocations that are not fully        *         
         *              qualified in single quotes.  useful for       *         
         *              batch tmp without tso racf segments.          *         
         *                                                            *         
         *            HTML                                            *         
         *              flag to indicate that the MSGDx is in         *         
         *              HTML format (user must enter text in html)    *         
         *                                                            *         
         *            IMPORTANCE value                                *         
         *              importance of the note - values may be        *         
         *              LOW                                           *         
         *              NORMAL                                        *         
         *              HIGH                                          *         
         *              or abbreviated as HI, LO, NO                  *         
         *                                                            *         
         *            MURPHY                                          *         
         *              Include some random words of wisdom from      *         
         *              Edward A. Murphy, Jr and others.              *         
         *                                                            *         
         *            MSGDS data-set-name                             *         
         *              specifies the data set that contains the      *         
         *              message                                       *         
         *              If the data-set-name is '*' and this is under *         
         *              ISPF then the ISPF Editor will be invoked to  *         
         *              create the message text.                      *         
         *                                                            *         
         *              If the data-set-name is prefixed with *@      *         
         *              then debug mode is enabled and the            *         
         *              data-set-name is set with the *@ removed.     *         
         *                                                            *         
         *            MSGDD ddname                                    *         
         *              specifies the DDname that contains the        *         
         *              message                                       *         
         *                                                            *         
         *            MSGQ                                            *         
         *              Indicates that the message will be passed     *         
         *              in the TSO QUEUE                              *         
         *                                                            *         
         *            MSG72                                           *         
         *              Indicates that only the first 72 characters   *         
         *              per record of the message will be used.       *         
         *              (thus ignoring sequence numbers)              *         
         *                                                            *         
         *            NOIDVAL                                         *         
         *              If ID validation is enabled then this option  *         
         *              will prevent the userids from being checked   *         
         *              - use this if you know the ids are good       *         
         *                and to save overhead in xmitip.             *         
         *                                                            *         
         *            NOMSG                                           *         
         *              indicates that no message is being sent,      *         
         *              only a file transmit is to occur.             *         
         *                                                            *         
         *            NOCONFIRM                                       *         
         *              indicates that no 'confirmation' message will *         
         *              be generated out of this command.             *         
         *                                                            *         
         *            REPLYTO reply.to.address@node                   *         
         *            or                                              *         
         *            FROM "reply name" <reply.name@address>          *         
         *              specifies the reply address which is different*         
         *              from the FROM address.                        *         
         *                                                            *         
         *            RECEIPT address                                 *         
         *            will cause a return receipt request to get asked*         
         *            for to the specified address.                   *         
         *                                                            *         
         *            MARGIN Lm/Rm/Tm/Bm                              *         
         *            or                                              *         
         *            MARGIN (Lm/Rm/Tm/Bm Lm/Rm/Tm/Bm ...)            *         
         *              defines the margins for the REPORT attachments*         
         *              Lm = left margin   Rm = right margin          *         
         *              Tm = top margin    Bm = bottom margin         *         
         *            the values in inches (e.g. .8 for .8 inch)      *         
         *            - Each set applies to the relative FILE dsn or  *         
         *              FILEDD ddname or FILEO file.                            
         *              If FILE and FILEDD and FILEO are coded        *         
         *              then the dsn's are counted first from         *         
         *              FILE and then FILEDD and then FILEO.          *         
         *                                                            *         
         *            PRIORITY value                                  *         
         *              priority of the note - values may be          *         
         *              NON-URGENT                                    *         
         *              NORMAL                                        *         
         *              URGENT                                        *         
         *              or abbreviated as NON, NOR, UR                *         
         *              (may be used to influence transmission speed) *         
         *                                                            *         
         *            SENSITIVITY value                               *         
         *              sensitivity of the note - values may be       *         
         *              PERSONAL                                      *         
         *              PRIVATE                                       *         
         *              CONFIDENTIAL                                  *         
         *              COMPANY-CONFIDENTIAL                          *         
         *              or abbreviated as PE, PR, CON, COM            *         
         *                                                            *         
         *            SIG dsname                                      *         
         *              specifies a dsname for a signature block      *         
         *                                                            *         
         *            SIGDD ddname                                    *         
         *              specifies a ddname for a signature block      *         
         *                                                            *         
         *            SUBJECT 'subject for message'                   *         
         *              specifies the subject for the message         *         
         *              or                                            *         
         *            SUBJECT "subject for message"                   *         
         *              you may use either single (') or double (")   *         
         *              quotes on both ends (both must be the same    *         
         *              and then you can use the other flavour quote  *         
         *              inside the subject.                           *         
         *              Special keywords: &DATE, &DAY, and &TIME      *         
         *                                &JOB &SYSID                 *         
         *              Note: If &DATE is found in the subject it is  *         
         *                    replaced by the date month dd,yyyy      *         
         *                    If &DAY is found in the subject it is   *         
         *                    replaced by the day of the week         *         
         *                    If &TIME is found in the subject it is  *         
         *                    replaced by the current time.           *         
         *                    &DATE may also be represented by        *         
         *                       &DATE-n (e.g. &DATE-1)               *         
         *                    &DAY may also be represented by         *         
         *                       &DAY-n (e.g. &DAY-1)                 *         
         *                    &JOB will return the current jobname    *         
         *                    &SYSID will return the current system   *         
         *                           smf name                         *         
         *                                                            *         
         *            ZIPMETHOD method                                *         
         *                   The method of compression to be used     *         
         *                    by the ZIP utility.                     *         
         *                    PKZIP supports:                         *         
         *                          Normal, Maximum, Fast,            *         
         *                          Superfast, and Store              *         
         *                                                            *         
         *            ZIPPASS pwd                                     *         
         *                    pwd is a password (case sensitive)      *         
         *                            that will be used by ZIP to     *         
         *                            encrypt the file                *         
         *                                                            *         
         * Notes: The default margins for FORMAT are .8" for left and *         
         *        right and 1" for top and bottom.                    *         
         *                                                            *         
         * Customization: 1) update exec XMITIPCU for local custom    *         
         *                   values then                              *         
         *                2) find *custom* to find where you          *         
         *                   need to customize some processing        *         
         *                                                            *         
         * Author:    Lionel B. Dyck                                  *         
         *            Kaiser Permanente Information Technology        *         
         *            25 N. Via Monte Ave                             *         
         *            Walnut Creek, California 94598                  *         
         *            (925) 926-5332                                  *         
         *            Internet: Lionel.B.Dyck@kp.org                  *         
         *                                                            *         
         * ---------------------------------------------------------- *         
         * Thanks to Leland Lucius for providing the code for the     *         
         *           PDF conversion.                                  *         
         *           (Leland.Lucius@ecolab.com)                       *         
         * ---------------------------------------------------------- *         
         * Thanks to Mark Feldman for the XMITB64 encoding BAL code   *         
         *          mark.feldman@empirebcbs.com                       *         
         * ---------------------------------------------------------- *         
         * Thanks to Paul Wells for the Murphy code                   *         
         *          Paul.Wells@ladbrokes.co.uk                        *         
         * ---------------------------------------------------------- *         
         * Thanks to Dana Mitchell for the code to support the        *         
         * Interlink TCPACCESS SMTP     dana.mitchell@ing-dm.com      *         
         * ---------------------------------------------------------- *         
         * Thanks to Rich Stuemke (rstuemke@ILSOS.NET)                *         
         * of the Office of the Illinois Secretary of State           *         
         * for the Machine Carriage Control code                      *         
         * ---------------------------------------------------------- *         
         * Thanks to Wolfram Schwenzer (Wolfram.Schwenzer@SAC.AOK.DE) *         
         * for the code to support in rtf files the \{ and }          *         
         * ---------------------------------------------------------- *         
         * Thanks to Felipe Cvitanich (Felipe@dk.ibm.com)             *         
         * for the code to support hfs binary and atsign.             *         
         * ---------------------------------------------------------- *         
         *                                                            *         
         * History:                                                   *         
         *            11/19/01:  4.46 change for enrich text/html     *         
         *                       -    Change comment on rtf to rich   *         
         *                       -    support antispoof option        *         
         *                       -    add blank line after antispoof  *         
         *                       -    minor cleanup                   *         
         *                       -    correct test for file gdg       *         
         *                       -    add validation of format value  *         
         *                       -    support font_size and def_orient *        
         *                       -    support &sysid in subject        *        
         *                       -    fix hlq for batch for unqual    *         
         *                            data sets and noprefix          *         
         *            10/01/01:  4.45 add space to report before file *         
         *            09/26/01:  4.44 Change RTF Machine CC process   *         
         *                       -    Change exit 4 to exit 8         *         
         *                       -    Remove name-in-archive message  *         
         *                            if not pkzip.                   *         
         *                       -    Issue informational msg if      *         
         *                            name-in-archive not supported.  *         
         *                       -    Enclose *list-id* in quotes     *         
         *                            and remove the *'s              *         
         *                       -    Add comma for CC's in envelop   *         
         *            08/23/01:  4.43 fix vget zapplid if under       *         
         *                            ISPF and under another app (sas)*         
         *                       -    test for empty attachments      *         
         *                       -    fix *create* edit macro name    *         
         *                       -    fix *create* file suffix        *         
         *                       -    change random() to              *         
         *                            to right(time('l'),4)           *         
         *            08/01/01:  4.42 match xmitipi level             *         
         *            07/23/01:  4.41 fix zip work alloc if blocks    *         
         *                       -    fix zip return code check       *         
         *                       -    add disclaimer support defined  *         
         *                            in xmitipcu                     *         
         *            06/21/01:  4.40 fix hlq for smtp secure d/s     *         
         *            06/14/01:  4.39 cleanup the envelope header     *         
         *                            by removing extra double quote  *         
         *            06/06/01:  4.38 use charuse option from xmitipcu*         
         *            06/06/01:  4.37 fix free for encode dd          *         
         *                       - Change Text attachment charset     *         
         *            05/21/01:  4.36 Fix null record in zipwork      *         
         *                       - fix append_domain                  *         
         *                       - change edit macro name to xmitipem *         
         *                       - support GDG file attachments       *         
         *                       - cleanup if base64 fails            *         
         *                       - change size alloc for zipwork      *         
         *                       - enhance xmitip report              *         
         *                       - warn if filename and format        *         
         *                         don't match (still send)           *         
         *                       - fix nulls in message text          *         
         *                       - change *create* to just * test     *         
         *                         for attachment dsname              *         
         *                       - fix h.w test for .                 *         
         *                       - updates from Felipe Cvitanich      *         
         *                         for binary hfs and atsign support  *         
         *                       - move count for zip files to after  *         
         *                         zip and encode then test limit     *         
         *            xx/xx/xx:- 4.35 beta level                      *         
         *            03/23/01:  4.34 Fix Addressfile hlq             *         
         *            03/15/01:  4.33 Add FILEO option                *         
         *                       - correct blank/null lines for pdf   *         
         *                       - correct format/filename/etc for    *         
         *                         filedd                             *         
         *            02/12/01:  4.32 Add : after mail_relay          *         
         *                       4.32 Free encodin/encodout           *         
         *            01/31/01:  4.31 add default file suffix         *         
         *                       - add mail_relay variable            *         
         *                       - clean up history                   *         
         *                       - change sender to use from_default  *         
         *                         for identification purposes        *         
         *            01/03/01:  4.30 add default paper size          *         
         *            12/21/00:  4.29 change to match xmitipi level   *         
         *            12/07/00:  4.28 add option for receipt type     *         
         *            12/06/00:  4.27 add support for                 *         
         *                            create_dsn_lrecl variable       *         
         *                       - correct *create* processing        *         
         *            ..                                              *         
         *            04/15/93:  redone for XMITIP                    *         
         *            09/21/90:  creation of exec as xmitvm           *         
         *                                                            *         
         * ---------------------------------------------------------- */        
                                                                                
        parse arg options                                                       
                                                                                
        signal on novalue                                                       
                                                                                
        /* ----------------------------------------------------- *              
         * If No options and ISPF is active invoke ISPF frontend *              
         * ----------------------------------------------------- */             
        if length(options) = 0 then                                             
           if sysvar('sysispf') = "ACTIVE" then do                              
           /**** Insert LIBDEF to Panels Library if desired here ****/          
              Address ISPExec,                                                  
                 "Select cmd(%xmitipi) scrname(XMITIP)"                         
              exit 0                                                            
              end                                                               
                                                                                
        /* -------------------------- *                                         
         * set up defaults            *                                         
         * -------------------------- */                                        
        parse value "" with address_n. printcc bcc bcc_n. cc cc_n. ,            
                            confirm ddn dsn file filedd filedesc ,              
                            filename zip_method fileo ,                         
                            from from_def from_n. header. msg72 ,               
                            importance lp margin msgdd msgds msgq ,             
                            msgsub murphy ng nomsg null priority ,              
                            receipt receipt_n.  replyto replyto_n. ,            
                            report rtf sensitivity sigddn sigdsn ,              
                            smtp_secure subject writer_kw zone ,                
                            create_dsns size debug format zippass ,             
                            file_dsn file_ddn pdf hlq enrich ldap,              
                            noidval fsuf mail_relay address_file ,              
                            msg_rec empty_ds                                    
        workdd = "XM"right(time('s'),2)""right(time('l'),4)                     
        indd   = "XM"right(time('s'),2)""right(time('l'),4)                     
        eddd   = "XM"right(time('s'),2)""right(time('l'),4)                     
        nullc =  "00"x                                                          
                                                                                
        ff     = x2c('0C')   /* Form Feed */                                    
        lf     = x2c('0A')   /* Line Feed */                                    
        in.0   = 0           /* set input counter to zero */                    
                                                                                
        zipcount   = 0                                                          
        pdf_count  = 0                                                          
        bytes      = 0                                                          
        save_lrecl = 90                                                         
        msgid      = sysvar("sysicmd")":"                                       
        if length(msgid) = 0 then                                               
           msgid = sysvar("syspcmd")":"                                         
                                                                                
        /* ----------------------------------------------------- *              
         * Test if e-mail validation already done                *              
         * ----------------------------------------------------- */             
         zapplid = null                                                         
         if sysvar('sysispf') = "ACTIVE" then do                                
            Address ISPExec "Vget (Zapplid)"                                    
            if zapplid = "XMIT" then ldap = 1                                   
            end                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Invoke XMITIPCU for local customization values        *              
         * ----------------------------------------------------- */             
        cu = xmitipcu()                                                         
                                                                                
        /* ----------------------------------------------------- *              
         * parse the customization defaults to use them here     *              
         * ----------------------------------------------------- */             
        parse value cu with center "/" zone "/" smtp "/" ,                      
                vio "/" smtp_secure "/" smtp_address "/" ,                      
                smtp_domain "/" font "/" tenter "/" ,                           
                sysout_class "/" from_center "/" writer "/" ,                   
                mtop "/" mbottom "/" mleft "/" mright "/" ,                     
                host "/" name "/" domain "/" from_default ,                     
                "/" append_domain "/" zip_type "/" zip_load "/" ,               
                zip_unit "/" interlink "/" size_limit "/" ,                     
                b64_load "/" batch_idval "/" create_dsn_lrecl ,                 
                "/" receipt_type "/" paper_size "/" file_suf ,                  
                "/" mail_relay "/" AtSign "/" ispffrom ,                        
                "/" char "/" charuse "/" disclaim "/" empty_opt ,               
                "/" font_size "/" def_orient ,                                  
                "/" antispoof                                                   
        center = strip(center)                                                  
        domain = strip(domain)                                                  
        host   = strip(host)                                                    
        name   = strip(name)                                                    
        smtp   = strip(smtp)                                                    
        zone   = strip(zone)                                                    
        vio    = strip(vio)                                                     
        font   = strip(font)                                                    
        writer = strip(writer)                                                  
        mtop    = strip(mtop)                                                   
        mbottom = strip(mbottom)                                                
        mleft   = strip(mleft)                                                  
        mright  = strip(mright)                                                 
        tenter = strip(tenter)                                                  
        smtp_address  = strip(smtp_address)                                     
        smtp_domain   = strip(smtp_domain)                                      
        sysout_class  = strip(sysout_class)                                     
        from_center   = strip(from_center)                                      
        from_default  = strip(from_default)                                     
        append_domain = strip(append_domain)                                    
        zip_load      = strip(zip_load)                                         
        zip_type      = strip(zip_type)                                         
        zip_unit      = strip(zip_unit)                                         
        b64_load      = strip(b64_load)                                         
        paper_size    = strip(paper_size)                                       
        file_suf      = strip(file_suf)                                         
        mail_relay    = strip(mail_relay)                                       
        /*FEC 20010423: AtSign Support */                                       
        AtSign        = left(strip(AtSign),1,"@")                               
        if length(mail_relay) > 0 then                                          
           mail_relay = mail_relay":"                                           
        char       = strip(char)                                                
        charuse    = strip(charuse)                                             
        disclaim   = strip(disclaim)                                            
        font_size  = strip(font_size)                                           
        def_orient = strip(def_orient)                                          
        antispoof  = strip(antispoof)                                           
                                                                                
        Select                                                                  
        when receipt_type = 1 then                                              
           receipt_key = "Return-Receipt-To"                                    
        when receipt_type = 2 then                                              
           receipt_key = "Disposition-Notification-To"                          
        otherwise                                                               
           receipt_key = "Disposition-Notification-To"                          
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Now save the tenter value for use by the xmitipem     *              
         * ispf edit macro.                                      *              
         * ----------------------------------------------------- */             
         if sysvar('sysispf') = "ACTIVE" then                                   
            Address ISPExec "Vput (tenter)"                                     
                                                                                
        /* ----------------------------------------------------- *              
         *  Test if Batch e-mail validation enabled              *              
         * ----------------------------------------------------- */             
         if batch_idval > 0 then ldap = 1                                       
                                                                                
        /* ----------------------------------------------------- *              
         * Process the To address                                *              
         * ----------------------------------------------------- */             
         Select                                                                 
            when left(options,1) = '"' then do                                  
                 pl = pos(">",options)                                          
                 address = left(options,pl)                                     
                 options = substr(options,pl+1)                                 
                 end                                                            
            when left(options,1) = "'" then do                                  
                 pl = pos(">",options)                                          
                 address = left(options,pl)                                     
                 options = substr(options,pl+1)                                 
                 end                                                            
            when left(options,1) = '(' then do                                  
                 parse value options with "(" address ")" options               
                 end                                                            
            otherwise                                                           
                 parse value options with address options                       
         end                                                                    
         options = strip(options)                                               
                                                                                
        save_address = address                                                  
        call process_address "("address")"                                      
        address = t_addrs                                                       
        do i = 1 to t_names.0                                                   
           address_n.i = strip(t_names.i)                                       
           end                                                                  
                                                                                
        if address = "?" then signal exit_8                                     
        if length(address) = 0 then signal exit_8                               
                                                                                
        /* ----------------------------- *                                      
         * get uppercase copy of options *                                      
         * ----------------------------- */                                     
        options       = strip(options)                                          
        upper_options = translate(options)                                      
                                                                                
        /* ----------------------------------------------------- *              
         * Now process the keywords                              *              
         * ----------------------------------------------------- */             
        do until length(options) = 0                                            
           option = word(upper_options,1)                                       
           Select                                                               
             When option = "ADDRESSFILE"   then call proc_addressfile           
             When option = "ADDRESSFILEDD" then call proc_addressfiledd         
             When option = "ASA"           then call proc_asa                   
             When option = "BCC"           then call proc_bcc                   
             When option = "CC"            then call proc_cc                    
             When option = "DEBUG"         then call proc_debug                 
             When option = "FILE"          then call proc_file                  
             When option = "FILEDD"        then call proc_filedd                
             When option = "FILEDESC"      then call proc_filedesc              
             When option = "FILENAME"      then call proc_filename              
             When option = "FILEO"         then call proc_fileo                 
             When option = "FORMAT"        then call proc_format                
             When option = "FROM"          then call proc_from                  
             When option = "HLQ"           then call proc_hlq                   
             When option = "HTML"          then call proc_html                  
             When option = "IMPORTANCE"    then call proc_importance            
             When option = "MACH"          then call proc_mach                  
             When option = "MARGIN"        then call proc_margin                
             When option = "MSGDD"         then call proc_msgdd                 
             When option = "MSGDS"         then call proc_msgds                 
             When option = "MSGQ"          then call proc_msgq                  
             When option = "MSG72"         then call proc_msg72                 
             When option = "MURPHY"        then call proc_murphy                
             When option = "NOCONFIRM"     then call proc_noconfirm             
             When option = "NOMSG"         then call proc_nomsg                 
             When option = "NOIDVAL"       then call proc_noidval               
             When option = "PRIORITY"      then call proc_priority              
             When option = "RECEIPT"       then call proc_receipt               
             When option = "REPLYTO"       then call proc_replyto               
             When option = "REPORT"        then call proc_report                
             When option = "SENSITIVITY"   then call proc_sensitivity           
             When option = "SIG"           then call proc_sig                   
             When option = "SIGDD"         then call proc_sigdd                 
             When option = "SUBJECT"       then call proc_subject               
             When option = "ZIPMETHOD"     then call proc_zipmethod             
             When option = "ZIPPASS"       then call proc_zippass               
             /* reserved for testing purposes */                                
             When option = "XMZIP"         then call proc_xmzip                 
                                                                                
             Otherwise do                                                       
               say msgid "keyword: >"option"<" ,                                
                   "is invalid in the syntax of this command."                  
               signal exit_8                                                    
             end                                                                
           end                                                                  
           options       = strip(options)                                       
           upper_options = translate(options)                                   
         end                                                                    
                                                                                
        /* ----------------------------------------------------- *              
         * Test to see if HLQ specified, otherwise default       *              
         * ----------------------------------------------------- */             
        if hlq = null  then select                                              
           when sysvar("syspref") = null then do                                
              hlq  = sysvar("sysuid")                                           
              bhlq = hlq                                                        
              end                                                               
           When sysvar("syspref") <> sysvar("sysuid") then do                   
              hlq  = sysvar("syspref")"."sysvar("sysuid")                       
              bhlq = sysvar("syspref")                                          
              end                                                               
           Otherwise do                                                         
              hlq  = sysvar("syspref")                                          
              bhlq = hlq                                                        
              end                                                               
           end                                                                  
                                                                                
        /* --------------------------------------------------------- *          
         * Test AddressFile dsname                                   *          
         * --------------------------------------------------------- */         
        if address_file <> null then                                            
           call Proc_AddressFile_Setup                                          
                                                                                
        /* ----------------------------------------------------- *              
         * Test validity of FILE dsnames (if specified)          *              
         * ----------------------------------------------------- */             
         if length(file) > 0 then                                               
            do i = 1 to words(file)                                             
               if left(word(file,i),1) = "*" then iterate                       
               if left(word(file,i),1) <> "'" then do                           
                  templ = subword(file,1,i-1)                                   
                  tempr = subword(file,i+1)                                     
                  file = templ "'"bhlq"."word(file,i)"'" tempr                  
                  end                                                           
               if pos("(",word(file,i)) > 0 then                                
                  do x = 1 to 1                                                 
                  parse value word(file,i) with templ "("gdg")"                 
                  if datatype(gdg) <> "NUM" then leave                          
                  tempd = allocgdg("*" word(file,i))                            
                  templ = subword(file,1,i-1)                                   
                  tempr = subword(file,i+1)                                     
                  file = templ tempd tempr                                      
                  end                                                           
               if "OK" <> sysdsn(word(file,i)) then do                          
                   ng = 1                                                       
                   say msgid "DSN:" word(file,i) ,                              
                             '-' sysdsn(word(file,i))                           
                   end                                                          
               if ng = 1 then do                                                
                  Say msgid "Ending because of invalid dsnames."                
                  exit 8                                                        
                  end                                                           
               end                                                              
                                                                                
        /* ----------------------------------------------------- *              
         * Test enrich keyword and default if needed             *              
         * ----------------------------------------------------- */             
        if enrich = null then                                                   
           enrich = "plain"                                                     
                                                                                
        /* -------------------------- *                                         
         * Test for REPORT and FORMAT *                                         
         * -------------------------- */                                        
        format_report = 0                                                       
        if format <> null                                                       
           then if report <> null then format_report = 1                        
        if report <> null                                                       
           then if format <> null then format_report = 1                        
        if format_report = 1 then do                                            
           say msgid "Both FORMAT and REPORT are not allowed",                  
                     "in the same execution."                                   
           say msgid "Command terminating - try again."                         
           signal exit_8                                                        
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Convert REPORT to FORMAT (if only REPORT specified)   *              
         * ----------------------------------------------------- */             
        if words(report) > 0 then do                                            
           do rp = 1 to words(report)                                           
              parse value word(report,rp) with rp1 "/" rp2 "/" rp3              
              rp1 = strip(rp1)                                                  
              rp2 = strip(rp2)                                                  
              rp3 = strip(rp3)                                                  
              if translate(rp1) = "X" then rp1 = null                           
              Select                                                            
                When translate(rp2) = "BIN" then                                
                     format = "BIN/"strip(rp1)                                  
                When abbrev("LANDSCAPE",translate(rp1),1) = 1 then              
                     format = format "rtf/"rp1"/"rp2"/"rp3                      
                When abbrev("PORTRAIT",translate(rp1),1) = 1 then               
                     format = format "rtf/"rp1"/"rp2"/"rp3                      
                When abbrev("HTML",translate(rp2),3) = 1 then do                
                     format = format "html/"rp3"/"rp1                           
                     end                                                        
                When translate(rp2) = "RTF" then do                             
                     format = format "rtf/P"rp3"/"rp1                           
                     end                                                        
                Otherwise format = format rp1"/"                                
                end                                                             
              end                                                               
          format = strip(format)                                                
          say msgid "---------------------------------------------"             
          say msgid "Information about REPORT to FORMAT Conversion:"            
          say msgid " The REPORT Keyword is being replaced by the"              
          say msgid " FORMAT statement. You specified:"                         
          if words(report) > 1 then rpt = "("report")"                          
             else rpt = report                                                  
          say msgid "REPORT" rpt                                                
          if words(format) > 1 then fmt = "("format")"                          
             else fmt = format                                                  
          say msgid " You should change this to:"                               
          say msgid "FORMAT" fmt                                                
          say msgid "---------------------------------------------"             
          end                                                                   
                                                                                
        /* ----------------------------------------------------- *              
         * Test if to=*list-id  then must have cc or bcc         *              
         * ----------------------------------------------------- */             
           if left(address,1) = "*" then do                                     
              if words(cc) + words(bcc) = 0 then do                             
                 say msgid "A *list-id* address must have a CC or" ,            
                           "BCC list of addresses."                             
                 say msgid "Process ending."                                    
                 signal exit_8                                                  
                 end                                                            
             end                                                                
                                                                                
        /* ----------------------------------------------------- *              
         * Test Validity of all e-mail addresses.                *              
         * ----------------------------------------------------- */             
         parse value "" with t_address t_cc t_bcc temp_address                  
         do i = 1 to words(address)                                             
            call test_address word(address,i) "To"                              
            if trc = 1 then                                                     
               t_address = strip(t_address temp_address)                        
            else                                                                
               t_address = strip(t_address word(address,i))                     
            end                                                                 
         do i = 1 to words(cc)                                                  
            call test_address word(cc,i) "CC"                                   
            if trc = 1 then                                                     
               t_cc = strip(t_cc temp_address)                                  
            else                                                                
               t_cc = strip(t_cc word(cc,i))                                    
            end                                                                 
         do i = 1 to words(bcc)                                                 
            call test_address word(bcc,i) "BCC"                                 
            if trc = 1 then                                                     
               t_bcc = strip(t_bcc temp_address)                                
            else                                                                
               t_bcc = strip(t_bcc word(bcc,i))                                 
            end                                                                 
         address = t_address                                                    
         cc      = t_cc                                                         
         bcc     = t_bcc                                                        
                                                                                
        /* ----------------------------------------------------- *              
         * If MSGQ is specified then read in the QUEUED message  *              
         * ----------------------------------------------------- */             
         if msgq = 1 then do                                                    
            msgqc = queued()                                                    
            do i = 1 to msgqc                                                   
               parse pull msgqd                                                 
               in.i = msgqd                                                     
               end                                                              
            in.0 = msgqc                                                        
            end                                                                 
                                                                                
        /* -------------------------- *                                         
         * Test for MSGDS, MSGDD or   *                                         
         * MSGQ unless NOMSG.         *                                         
         * -------------------------- */                                        
        if nomsg = null then do                                                 
        if length(dsn) + length(ddn) + length(msgq) = 0 then do                 
           say msgid "Neither the MSGDS, MSGDD, NOMSG" ,                        
                     "or MSGQ were specified."                                  
           say msgid "Command terminating - try again."                         
           signal exit_8                                                        
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * If MSGDS is * then check for ISPF environment and     *              
         * create dsn....                                        *              
         * ----------------------------------------------------- */             
         if dsn = "*" then do                                                   
            if sysvar('sysispf') <> "ACTIVE" then do                            
               say msgid "MSGDS of * specified but ISPF is not active."         
               say msgid "Try again when under ISPF."                           
               exit 8                                                           
               end                                                              
            else do                                                             
                 "Alloc f("eddd") unit("vio") spa(15,15) tr dsorg(ps)" ,        
                       "recfm(v b) lrecl(76) new reuse blksize(0)"              
                 if enrich = "html" then do                                     
                    o.1 = "<html><body><pre>"                                   
                    "Execio * diskw "eddd" (finis stem o."                      
                    o. = null                                                   
                    end                                                         
                 Address ISPExec                                                
                 "LMInit dataid(xmited) ddname("eddd")"                         
                 edtitle = "XMITIP Message"                                     
                  "Vput (tenter enrich)"                                        
                 "Edit dataid(&xmited) profile(xmitip)" ,                       
                      "macro(xmitipem) Panel(xmitiped)"                         
                 e_rc = rc                                                      
                 ddn  = eddd                                                    
                 indd = ddn                                                     
                 Address TSO                                                    
                 if e_rc > 3 then do                                            
                    "Free f("eddd")"                                            
                    say msgid "Ending per your request."                        
                    exit e_rc                                                   
                    end                                                         
                 end                                                            
            end                                                                 
                                                                                
        /* -------------------------- *                                         
         * If nomsg not specified     *                                         
         * process MSGDS or MSGDD     *                                         
         * -------------------------- */                                        
           if dsn = null then do                                                
              indd = ddn                                                        
              call listdsi(ddn "FILE")                                          
              if datatype(syslrecl) <> "NUM"                                    
                 then syslrecl = 0                                              
              save_lrecl = max(syslrecl, save_lrecl)                            
              dsn = sysdsname                                                   
              end                                                               
           else if dsn <> "*" then do                                           
                if left(dsn,1) <> "'" then                                      
                   dsn = "'"bhlq"."dsn"'"                                       
                if "OK" <> sysdsn(dsn) then do                                  
                   say msgid "Message dataset error"                            
                   say msgid dsn sysdsn(dsn)                                    
                   say msgid "Terminating - try again."                         
                   exit 8                                                       
                   end                                                          
                call listdsi(dsn)                                               
                save_lrecl = max(syslrecl, save_lrecl)                          
                end                                                             
           if save_lrecl > 1024 then signal big_lrecl                           
                                                                                
           if ddn = null then                                                   
              "ALLOC F("indd") DS("dsn") SHR"                                   
                                                                                
           "EXECIO * DISKR" indd "(FINIS STEM in."                              
           e_rc = rc                                                            
                                                                                
          /* -------------------------------------------------- *               
           * fix up message lines that start with a . as the    *               
           * first . will be lost via smtp...                   *               
           * And count bytes                                    */              
           do i = 1 to in.0                                                     
              if left(in.i,1) = "."                                             
                 then in.i = "."in.i                                            
              if pos(nullc,in.i) > 0 then                                       
                 in.i = translate(in.i,' ',null)                                
              bytes = bytes + length(in.i)                                      
              end                                                               
           msg_rec = in.0                                                       
           save_bytes = bytes                                                   
                                                                                
           if msgdd = null then "FREE F("indd")"                                
           if msgds = "*" then                                                  
              Address ISPExec "LMFree dataid("xmited")"                         
           if e_rc > 0 then do                                                  
              say msgid "Error in reading message file.",                       
                  "Ending XMITIP."                                              
              exit 8                                                            
              end                                                               
           end                                                                  
                                                                                
        /* ------------------- *                                                
         * reset indd          *                                                
         * ------------------- */                                               
        indd   = "XM"right(time('s'),2)""right(time('l'),4)                     
                                                                                
        /* ----------------------------------------------------- *              
         * Setup Murphy footnote to be written out in SMTP data. *              
         * ----------------------------------------------------- */             
        mu. = null                                                              
        mu.0 = 0                                                                
        mn = 0                                                                  
        if murphy = "on" then do                                                
           murph = xmitipmu()                                                   
           n     = in.0 + 1                                                     
           mn = n                                                               
           in.n  = " "                                                          
           in.0  = n                                                            
           n     = in.0 + 1                                                     
           in.n  = ""                                                           
           in.0  = n                                                            
           do murlen = 1 to length(murph)                                       
              murchar = substr(murph,murlen,1)                                  
              if murchar = "0A"x then do   /* New line of Murphy ? */           
                 n     = in.0 + 1                                               
                 in.n  = ""                                                     
                 in.0  = n                                                      
                 end                                                            
              else in.n = in.n""murchar                                         
              end                                                               
           mnx = 1                                                              
           do mx = mn to n                                                      
              if in.mx = null then iterate                                      
              mu.mnx = in.mx                                                    
              mnx = mnx + 1                                                     
              end                                                               
              mu.0 = mnx                                                        
           end                                                                  
                                                                                
        /* -------------------------- *                                         
         * Process SIGnature          *                                         
         * -------------------------- */                                        
         if length(sigdsn) + length(sigddn) > 0 then do                         
            if sigdsn <> null then do                                           
               if left(sigdsn,1) <> "'" then                                    
                  sigdsn = "'"bhlq"."sigdsn"'"                                  
               "ALLOC F("indd") DS("sigdsn") SHR"                               
               end                                                              
            else do                                                             
               save_dd = indd                                                   
               indd = sigddn                                                    
               end                                                              
            "EXECIO * DISKR" indd "(FINIS STEM sig."                            
            e_rc = rc                                                           
            if sigddn = null then                                               
               "Free  f("indd")"                                                
            if sigddn <> null then                                              
               indd = save_dd                                                   
            if e_rc > 0 then do                                                 
               say msgid "Error reading Signature file.",                       
                         "Ending XMITIP."                                       
               exit 8                                                           
               end                                                              
            m = in.0 + 1                                                        
            in.m = "  "                                                         
            in.0 = m                                                            
            if enrich = "html" then do                                          
               m = in.0 + 1                                                     
               in.m = "<p><pre>"                                                
               in.0 = m                                                         
               end                                                              
            do i = 1 to sig.0                                                   
               m = in.0 + 1                                                     
               in.m = sig.i                                                     
               in.0 = m                                                         
               end                                                              
            end                                                                 
                                                                                
        /* --------------------------------------------------------- *          
         * Process Disclaimer if one is defined in XMITIPCU.         *          
         *                                                           *          
         * This data set is an installation standard. If it doesn't  *          
         * exist then it won't be added and no warning will be       *          
         * issued.                                                   *          
         * --------------------------------------------------------- */         
         if length(disclaim) > 0 then                                           
            if "OK" <> sysdsn(disclaim) then disclaim = null                    
            else do                                                             
               "ALLOC F("indd") DS("disclaim") SHR"                             
               "EXECIO * DISKR" indd "(FINIS STEM disclaim."                    
               e_rc = rc                                                        
               "Free  f("indd")"                                                
               if e_rc > 0 then leave                                           
                                                                                
               m = in.0 + 1                                                     
               in.m = "  "                                                      
               in.0 = m                                                         
                                                                                
               if enrich = "html" then do                                       
                  m = in.0 + 1                                                  
                  in.m = "<p><pre>"                                             
                  in.0 = m                                                      
                  end                                                           
               do i = 1 to disclaim.0                                           
                  m = in.0 + 1                                                  
                  in.m = disclaim.i                                             
                  in.0 = m                                                      
                  end                                                           
               end                                                              
                                                                                
        /* --------------------------------------------------------- *          
         * Process AntiSpoof if set in XMITIPCU.                     *          
         * --------------------------------------------------------- */         
         if length(antispoof) > 0 then do                                       
               parse value antispoof with a1 "##" a2 "##" a3                    
               orig_msg = "This E-Mail Originated from:"                        
               a1 = strip(a1)                                                   
               a2 = strip(a2)                                                   
               a3 = strip(a3)                                                   
               l1 = length(a1)                                                  
               l2 = length(a2)                                                  
               l3 = length(a3)                                                  
               l4 = length(orig_msg)                                            
               if l1 > l2 then lu = l1                                          
                          else lu = l2                                          
               if l2 > l3 then lu = l2                                          
                          else lu = l3                                          
               if l3 > l4 then lu = l3                                          
                          else lu = l4                                          
               m = in.0 + 1                                                     
               in.m = "  "                                                      
               m = m + 1                                                        
               in.m = "*" left("=",lu,"=") "*"                                  
               m = m + 1                                                        
               in.m = "*" left("This E-Mail Originated from:", ,                
                             lu) "*"                                            
               if enrich = "html" then do                                       
                  m = m + 1                                                     
                  in.m = "<p><pre>"                                             
                  end                                                           
               if sysvar("sysenv") <> "FORE" then do                            
                  m = m + 1                                                     
                  jn = "Job:" mvsvar("symdef","jobname")                        
                  in.m = "*" left(jn,lu) "*"                                    
                  end                                                           
               m = m + 1                                                        
               in.m = "*" left(a1,lu) "*"                                       
               m = m + 1                                                        
               in.m = "*" left(a2,lu) "*"                                       
               m = m + 1                                                        
               in.m = "*" left(a3,lu) "*"                                       
               m = m + 1                                                        
               in.m = "*" left("On" date() "at" time("C"),lu) "*"               
               m = m + 1                                                        
               in.m = "*" left("=",lu,"=") "*"                                  
               m = m + 1                                                        
               in.m = " "                                                       
               in.0 = m                                                         
               end                                                              
                                                                                
        /* ----------------------------------------------------- *              
         * Fix the default from address to support nje if the    *              
         * note originates other than where smtp runs.           *              
         * Setup the Sender address                              *              
         * ----------------------------------------------------- */             
        if from = null then do                                                  
           from_def = 1                                                         
           from = from_default                                                  
           end                                                                  
        call test_address from "From"                                           
        if trc = 1 then from = temp_address                                     
        sender = from_default                                                   
                                                                                
        /* -------------------------- *                                         
         * Fixup ReplyTo              *                                         
         * -------------------------- */                                        
        if replyto <> null then do                                              
           call test_address replyto "ReplyTo"                                  
           if trc = 1 then replyto = temp_address                               
           end                                                                  
                                                                                
        /* -------------------------- *                                         
         * Fixup Receipt              *                                         
         * -------------------------- */                                        
        if receipt <> null then do                                              
           call test_address receipt "Receipt"                                  
           if trc = 1 then receipt = temp_address                               
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Test for invalid addresses via flag ldap = 2          *              
         * ----------------------------------------------------- */             
         if ldap = 2 then do                                                    
            say msgid "Invalid Addresses encountered. Terminating",             
                      "sending - correct and retry."                            
            Exit 8                                                              
            end                                                                 
                                                                                
        /* -------------------------- *                                         
         * Fix SUBJECT.               *                                         
         * -------------------------- */                                        
        if length(subject) = 0 then                                             
           Select                                                               
           When file <> null then                                               
                if words(file) = 1 then subject = "File:" file                  
                   else subject = "Multiple Files"                              
           When nomsg = null then subject = msgsub                              
           When nomsg = "off" then subject = "Message from" from                
           otherwise subject = "Note from" from                                 
           end                                                                  
                                                                                
        if confirm = null then do                                               
           Say msgid "XMITIP Application level:" ver                            
           say msgid " "                                                        
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Test for FROM or REPLYTO                              *              
         * ----------------------------------------------------- */             
        if confirm = null then do                                               
           if from_def = 1 then                                                 
              if replyto = null then  do                                        
           say msgid substr("-",1,64,"-")                                       
           Say msgid "Warning: " ,                                              
                     "No FROM or REPLYTO keyword specified.",                   
                      "Using Default."                                          
           say msgid "Replys to this e-mail will be delivered to" ,             
                     "TSO address:"                                             
           say msgid "  " from                                                  
           say msgid "These must be read using the TSO RECEIVE command."        
           say msgid substr("-",1,64,"-")                                       
           say msgid " "                                                        
           end                                                                  
           end                                                                  
                                                                                
        /* --------------------------------------------------------- *          
         * Build SMTP E-Mail Header                                  *          
         * --------------------------------------------------------- */         
        if confirm = null then                                                  
           say msgid "Message Addressing Information:"                          
                                                                                
        /* --------------------------------------------------------- *          
         * Test for Interlink TCP/IP and build correct format        *          
         * From keyword.  Use the From_Default e-mail so that the    *          
         * SMTP log will accurately reflect who is sending the       *          
         * e-mail (note that this information is not reflected in    *          
         * the delivered e-mail - only in the SMTP Logfile).         *          
         * --------------------------------------------------------- */         
        if interlink = 0 then do                                                
           header.1 = "helo" center                                             
           header.2 = "mail from:<"from">"                                      
           h = 2                                                                
           end                                                                  
        else do                                                                 
             header.1 = "X-From:"from                                           
             h = 1                                                              
             end                                                                
                                                                                
        xhead = "From: "                                                        
        if confirm = null then                                                  
           Say msgid xhead from                                                 
        xhead = "To:   "                                                        
        address = strip(address)                                                
                                                                                
        /* --------------------------------------------------------- *          
         * Set the RCPT TO syntax                                    *          
         * --------------------------------------------------------- */         
        if interlink = 0 then                                                   
           rcpt = "rcpt to:"                                                    
        else                                                                    
           rcpt = "X-To:"                                                       
                                                                                
        /* --------------------------------------------------------- *          
         * Now build the RCPT TO statements                          *          
         * --------------------------------------------------------- */         
        do i = 1 to words(address)                                              
           if left(strip(address),i) = "*" then iterate                         
           h = h + 1                                                            
           header.h = rcpt"<"mail_relay""word(address,i)">"                     
           if confirm = null then                                               
              Say msgid xhead word(address,i)                                   
           xhead = "      "                                                     
           end                                                                  
        xhead = "Cc:   "                                                        
        if length(cc) > 0 then                                                  
        do i = 1 to words(cc)                                                   
           h = h + 1                                                            
           header.h = rcpt"<"mail_relay""word(cc,i)">"                          
           if confirm = null then                                               
                 Say msgid xhead word(cc,i)                                     
           xhead = "      "                                                     
           end                                                                  
        xhead = "Bcc:  "                                                        
        if length(bcc) > 0 then                                                 
        do i = 1 to words(bcc)                                                  
           h = h + 1                                                            
           header.h = rcpt"<"mail_relay""word(bcc,i)">"                         
           if confirm = null then                                               
                 Say msgid xhead word(bcc,i)                                    
           xhead = "      "                                                     
           end                                                                  
                                                                                
        /* --------------------------------------------------------- *          
         * Now insert the 'data' statement                           *          
         * --------------------------------------------------------- */         
        h = h + 1                                                               
        header.h = "data"                                                       
                                                                                
        /* --------------------------------------------------------- *          
         * Now Build the SMTP E-Mail Envelop                         *          
         * --------------------------------------------------------- */         
         if confirm = null then                                                 
            say msgid " "                                                       
         if confirm = null then                                                 
            say msgid "The Mail Envelope:"                                      
                                                                                
        parse value date("s") date("m") with yy 5 . 7 dd 9 10 mm 13 .           
                                                                                
        h = h + 1                                                               
        header.h = "Sender:  " sender                                           
         if confirm = null then                                                 
            say msgid header.h                                                  
        if priority <> null then do                                             
           h = h + 1                                                            
           header.h    = "Priority:" priority                                   
           if confirm = null then say msgid header.h                            
           end                                                                  
        if importance <> null then do                                           
           h = h + 1                                                            
           header.h    = "Importance:" importance                               
           if confirm = null then say msgid header.h                            
           end                                                                  
        if sensitivity <> null then do                                          
           h = h + 1                                                            
           header.h    = "Sensitivity:" sensitivity                             
           if confirm = null then say msgid header.h                            
           end                                                                  
        h = h + 1                                                               
        header.h    = "Date:    " dd mm yy time() zone                          
        if confirm = null then                                                  
           Say msgid header.h                                                   
        h = h + 1                                                               
        if from_n.1 <> null then                                                
           header.h = "From:    " '"'from_n.1'" <'from'>'                       
        else                                                                    
           header.h = "From:    " from                                          
        h = h + 1                                                               
        if replyto <> null then do                                              
           if replyto_n.1 <> null then                                          
              header.h = "Reply-To: " '"'replyto_n.1'" <'replyto'>'             
           else                                                                 
              header.h = "Reply-To: " replyto                                   
           if confirm = null then                                               
              say msgid header.h                                                
           h = h + 1                                                            
           end                                                                  
        if receipt <> null then do                                              
           if receipt_n.1 <> null then                                          
              header.h = receipt_key": " '"'receipt_n.1 ,                       
                         '" <'receipt'>'                                        
           else                                                                 
              header.h = receipt_key": " receipt                                
           if confirm = null then                                               
              say msgid header.h                                                
           h = h + 1                                                            
           end                                                                  
        to_head = "To:      "                                                   
        comma   = ","                                                           
        do i = 1 to words(Address)                                              
               if word(address,i) = "*" then iterate                            
               if i      = words(address) then comma = " "                      
               addr      = word(address,i)                                      
               if address_n.i <> null then do                                   
                  if left(address_n.i,1) <> '"' then                            
                     addr = '"'strip(address_n.i)'" <'addr'>'                   
                  else                                                          
                     addr = strip(address_n.i) '<'addr'>'                       
                  end                                                           
               if left(addr,1) = "*" then do                                    
                  addr = substr(addr,2)                                         
                  if right(addr,1) = "*" then                                   
                     addr = left(addr,length(addr)-1)                           
                  addr = '"'addr'"'                                             
                  end                                                           
               header.h  = to_head addr""comma                                  
               if confirm = null then                                           
                  say msgid header.h                                            
               to_head   = "         "                                          
               h = h + 1                                                        
               end                                                              
        if length(strip(address)) = 0 then do                                   
           header.h  = "To:      " save_address                                 
           if confirm = null then                                               
              say msgid header.h                                                
           h = h + 1                                                            
           end                                                                  
        cc_head = "Cc:      "                                                   
        comma   = ","                                                           
        do i = 1 to words(cc)                                                   
               addr      = word(cc,i)                                           
               if i      = words(cc) then comma = " "                           
               if cc_n.i <> null then do                                        
                  if left(cc_n.i,1) = '"'                                       
                     then addr = strip(cc_n.i)  '<'addr'>'                      
                     else addr = '"'strip(cc_n.i)'" <'addr'>'                   
                  end                                                           
               header.h    = cc_head  addr""comma                               
               cc_head = "         "                                            
               if confirm = null then                                           
                  say msgid header.h                                            
               h = h + 1                                                        
               end                                                              
        header.h    = "X-Mailer:  XMITIP" ver " Rexx Exec on MVS"               
        h = h + 1                                                               
        header.h    = "Subject: " subject                                       
        if confirm = null then                                                  
           say msgid header.h                                                   
        header.0 = h                                                            
        out.  = null                                                            
        out.0 = 0                                                               
                                                                                
        /* --------------------------------------------------------- *          
         * Now put out Process Report                                *          
         * --------------------------------------------------------- */         
        if confirm = null then do                                               
           say msgid " "                                                        
           say msgid "Process Section"                                          
           say msgid " "                                                        
           end                                                                  
                                                                                
        /* -------------------------- *                                         
         * If FILE used then setup    *                                         
         * appropriate controls.      *                                         
         * -------------------------- */                                        
        tfl = length(file) + length(filedd) + length(fileo)                     
        if tfl > 0 | enrich = "html" then do                                    
           bnd = "Mime.Part.XMITIP.24jul65lrhg.0x0zax1d"                        
           mh.1 = "Mime-Version: 1.0"                                           
           mh.2 = 'Content-type: multipart/mixed; boundary="'bnd'"'             
           mh.3 = " "                                                           
           mh.4 = "This is a multi-part message in MIME format."                
           mh.5 = "--"bnd                                                       
           mh.6 = "Content-Type: text/"enrich"; charset="char                   
           mh.7 = "Content-Transfer-Encoding: 7bit"                             
           mh.8 = " "                                                           
           do i = 1 to 8                                                        
              out.0 = out.0 + 1                                                 
              n = out.0                                                         
              out.n = mh.i                                                      
              end                                                               
           end                                                                  
                                                                                
        /* -------------------------- *                                         
         * Write out message.         *                                         
         * -------------------------- */                                        
        if msgq = 1 then nomsg = null                                           
        if in.0 > 0 then do                                                     
           nomsg = null                                                         
           out.0 = out.0 + 1                                                    
           n = out.0                                                            
           out.n = "  "                                                         
        if substr(in.1,1,4) = "MIME" then out.0 = out.0 - 1                     
        do i = 1 to in.0                                                        
           save_lrecl = max(save_lrecl,length(out.n))                           
           if save_lrecl > 1024 then signal big_lrecl                           
           out.0 = out.0 + 1                                                    
           n = out.0                                                            
           if msg72 = 1 then                                                    
              out.n = left(in.i,72)                                             
           else out.n = in.i                                                    
           end                                                                  
           if confirm = null then                                               
              if msg_rec <> null then do                                        
                 Say msgid "Message records sent:" msg_rec                      
                 say msgid " "                                                  
                 if mn > 0 then do                                              
                    say msgid "Murphy Quote:"                                   
                    do mx = 1 to mu.0                                           
                       say msgid mu.mx                                          
                       end                                                      
                    end                                                         
                 end                                                            
           end                                                                  
        else do                                                                 
             n     = out.0 + 1                                                  
             out.n = "No message text - file transfer only"                     
             out.0 = n                                                          
             end                                                                
                                                                                
        /* -------------------------- *                                         
         * Write out FILE attachment  *                                         
         * -------------------------- */                                        
        if length(file) > 0 then                                                
        do f = 1 to words(file)                                                 
              fd = f                                                            
              t  = translate(word(format,f))                                    
              tl = word(format,f)                                               
              file_dsn = word(file,f)                                           
              if pos("(",file_dsn) > 0 then                                     
                 parse value file_dsn with . "(" member ")" .                   
              else member = null                                                
              if left(file_dsn,1) = "*" then do                                 
                 call create_file                                               
                 file_dsn = create_dsn                                          
                 end                                                            
              call listdsi(file_dsn)                                            
              if sysrecfm = "U" then do                                         
                 say msgid file_dsn "error - can not process RECFM=U",          
                          "datasets."                                           
                 exit 8                                                         
                 end                                                            
              mh_type = "dsn"                                                   
              call set_file_info                                                
              save_bytes = bytes                                                
              "ALLOC F("indd") DS("file_dsn") SHR Reuse"                        
              in. = null                                                        
              "EXECIO * DISKR" indd "(FINIS STEM in."                           
              e_rc = rc                                                         
              if in.0 = 0 then                                                  
                 Select                                                         
                 When empty_opt = 0 then do                                     
                    say msgid "Warning:" file_dsn "is empty. "                  
                    say msgid " "                                               
                    empty_ds = 1                                                
                    in.0 = 2                                                    
                    in.1 = " Warning: The original file" file_dsn               
                    in.2 = "          was empty. If this is in error",          
                           "contact the sender."                                
                    end                                                         
                 When empty_opt = 1 then do                                     
                    say msgid "Error:" file_dsn "is empty. " ,                  
                              "Ending XMITIP."                                  
                    exit 8                                                      
                    end                                                         
                 end                                                            
              "Free f("indd")"                                                  
              call count_bytes                                                  
              call test_limit                                                   
              if e_rc > 0 then do                                               
                 Say msgid " "                                                  
                 say msgid "Error reading file:" file_dsn ,                     
                           "Ending XMITIP."                                     
                 exit 8                                                         
                 end                                                            
              if confirm = null then do                                         
                 Say msgid " "                                                  
                 Say msgid "File:    " file_dsn                                 
                 end                                                            
              call process_file                                                 
              end                                                               
                                                                                
        /* -------------------------- *                                         
         * Write out FILEDD attachment*                                         
         * -------------------------- */                                        
        if length(filedd) > 0 then                                              
        do f = 1 to words(filedd)                                               
              fd = f + words(file)                                              
              t  = translate(word(format,fd))                                   
              tl = word(format,fd)                                              
              file_ddn = word(filedd,f)                                         
              call listdsi(file_ddn "FILE")                                     
              if sysrecfm = "U" then do                                         
                 say msgid file_dsn "error - can not process RECFM=U",          
                          "datasets."                                           
                 exit 8                                                         
                 end                                                            
              mh_type = "ddn"                                                   
              call set_file_info                                                
              in. = null                                                        
              save_bytes = bytes                                                
              "EXECIO * DISKR" file_ddn "(FINIS STEM in."                       
              if rc > 0 then do                                                 
                 say msgid "Error reading file:" file_ddn ,                     
                           "Ending XMITIP."                                     
                 exit 8                                                         
                 end                                                            
              if in.0 = 0 then                                                  
                 Select                                                         
                 When empty_opt = 0 then do                                     
                    say msgid "Warning:" file_ddn "is empty. "                  
                    say msgid " "                                               
                    empty_ds = 1                                                
                    in.0 = 2                                                    
                    in.1 = " Warning: The original file" file_ddn               
                    in.2 = "          was empty. If this is in error",          
                           "contact the sender."                                
                    end                                                         
                 When empty_opt = 1 then do                                     
                    say msgid "Error:" file_ddn "is empty. " ,                  
                              "Ending XMITIP."                                  
                    exit 8                                                      
                    end                                                         
                 end                                                            
              call count_bytes                                                  
              call test_limit                                                   
              if confirm = null then do                                         
                 say msgid "FileDD:" file_ddn                                   
                 end                                                            
              call process_file                                                 
              end                                                               
                                                                                
        /* -------------------------- *                                         
         * Write out FILEO attachment *                                         
         * -------------------------- */                                        
        if length(fileo) > 0 then                                               
        do f = 1 to words(fileo)                                                
              fd = f + words(file) + words(filedd)                              
              t  = translate(word(format,fd))                                   
              tl = word(format,fd)                                              
              /* Check for binary OGET: (FEC 20010425) */                       
              Select                                                            
                When left(t,3) = "BIN"    then Oget_fmt = "BINARY"              
                When left(t,6) = "ZIPBIN" then Oget_fmt = "BINARY"              
                Otherwise Oget_fmt = "TEXT"                                     
                end                                                             
              file_omvs = word(fileo,f)                                         
              call msg "off"                                                    
              "OGet" file_omvs "xmitip.omvs.file"fd Oget_fmt                    
              if rc > 0 then do                                                 
                 say msgid file_omvs "access or read error."                    
                 exit rc                                                        
                 end                                                            
              file_dsn = "xmitip.omvs.file"fd                                   
              call listdsi(file_dsn)                                            
              if sysrecfm = "U" then do                                         
                 say msgid file_dsn "error - can not process RECFM=U",          
                          "datasets."                                           
                 exit 8                                                         
                 end                                                            
              mh_type = "dsn"                                                   
              call set_file_info                                                
              in. = null                                                        
              save_bytes = bytes                                                
              "ALLOC F("indd") DS("file_dsn") SHR Reuse"                        
              in. = null                                                        
              "EXECIO * DISKR" indd "(FINIS STEM in."                           
              e_rc = rc                                                         
              "Free f("indd")"                                                  
              "Delete" file_dsn                                                 
              if e_rc > 0 then do                                               
                 say msgid "Error reading file:" file_omvs ,                    
                           "Ending XMITIP."                                     
                 exit 8                                                         
                 end                                                            
              if in.0 = 0 then                                                  
                 Select                                                         
                 When empty_opt = 0 then do                                     
                    say msgid "Warning:" file_omvs "is empty. "                 
                    say msgid " "                                               
                    empty_ds = 1                                                
                    in.0 = 2                                                    
                    in.1 = " Warning: The original file" file_omvs              
                    in.2 = "          was empty. If this is in error",          
                           "contact the sender."                                
                    end                                                         
                 When empty_opt = 1 then do                                     
                    say msgid "Error:" file_omvs "is empty. " ,                 
                              "Ending XMITIP."                                  
                    exit 8                                                      
                    end                                                         
                 end                                                            
              call count_bytes                                                  
              call test_limit                                                   
              if confirm = null then do                                         
                 say msgid "FileOMVS:" file_omvs                                
                 end                                                            
              call process_file                                                 
              end                                                               
                                                                                
        /* ----------------------------------------------------- *              
         * If no more file attachments then write out ending     *              
         * boundary statement.                                   *              
         * ----------------------------------------------------- */             
        if length(file) + length(filedd) + length(fileo) > 0 then do            
           i = out.0 + 1                                                        
           out.i = "--"bnd"--"                                                  
           out.0 = i                                                            
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Test for size_limit .........                         *              
         * ----------------------------------------------------- */             
         bytes = 0                                                              
         do bytecnt = 1 to out.0                                                
            bytes = bytes + length(out.bytecnt)                                 
            end                                                                 
         call test_limit                                                        
                                                                                
        /* ----------------------------------------------------- *              
         * Allocate sysout file for SMTP data to be routed to    *              
         * the OS/390 TCP/IP SMTP Server.                        *              
         * ----------------------------------------------------- */             
         if smtp_secure = null then do                                          
            if writer <> null then do                                           
               writer_kw = "Writer("writer")"                                   
               dest_kw = null                                                   
               end                                                              
            else dest_kw = "DEST("smtp_address")"                               
           "ALLOC F("workdd") SYSOUT("sysout_class")" dest_kw ,                 
              "recfm(v b) lrecl("save_lrecl+4") blksize(0)" writer_kw           
             end                                                                
        else do                                                                 
             space = (out.0 * save_lrecl)%34000                                 
             space = space + 1                                                  
             space = space","space                                              
             "ALLOC F("workdd") ds('"hlq".xmit.smtp')" ,                        
                "spa("space") tr" ,                                             
                "recfm(v b) lrecl("save_lrecl+4") blksize(0)"                   
             end                                                                
                                                                                
        /* ----------------------------------------------------- *              
         * If allocation failed tell the user...                 *              
         * ----------------------------------------------------- */             
         if rc > 0 then do                                                      
            say msgid": allocation failed to" smtp_address                      
            say msgid": contact your sysprog to fix this"                       
            exit 8                                                              
            end                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Setup suffix to be written out in SMTP data.          *              
         * ----------------------------------------------------- */             
        suf. = null                                                             
        suf.1 = "  "                                                            
        if interlink = 0 then do                                                
           suf.2 = "."                                                          
           suf.3 = "QUIT"                                                       
           suf.0 = 3                                                            
           end                                                                  
        else suf.0 = 1                                                          
                                                                                
        /* ----------------------------------------------------- *              
         * Write out the header then the data and finally the    *              
         * suffix.  Close and free the output to the SMTP        *              
         * server.                                               *              
         * ----------------------------------------------------- */             
         if debug <> "on" then do                                               
           "EXECIO * DISKW" workdd "(STEM header."                              
           "EXECIO * DISKW" workdd "(STEM out."                                 
           "EXECIO * DISKW" workdd "(FINIS STEM suf."                           
           if smtp_secure <> null then do                                       
              "Transmit" smtp_address "ds('"hlq".xmit.smtp')" ,                 
                      "nolog nonotify"                                          
              "FREE F("workdd")"                                                
              "Delete '"hlq".xmit.smtp'"                                        
              end                                                               
           else                                                                 
           "FREE F("workdd")"                                                   
           end                                                                  
        else do                                                                 
             say " "                                                            
             say msgid "XMITIP Debug Option Enabled"                            
             say msgid "The following is the generated message:"                
             say " "                                                            
             do deb = 1 to header.0                                             
                say header.deb                                                  
                end                                                             
             do deb = 1 to out.0                                                
                say out.deb                                                     
                end                                                             
             do deb = 1 to suf.0                                                
                say suf.deb                                                     
                end                                                             
             say " "                                                            
             say msgid "XMITIP Debug Report ending."                            
             say " "                                                            
             end                                                                
                                                                                
        /* -------------------------- *                                         
         * Issue confirmation msg     *                                         
         * -------------------------- */                                        
        if confirm = null then do                                               
                                                                                
        /* ----------------------------------------------------- *              
         * number format code thanks to Doug Nadel               *              
         * ----------------------------------------------------- */             
         str=strip(translate('0,123,456,789,abc,def', ,                         
                         right(bytes,16,','), ,                                 
                         '0123456789abcdef'),'L',',')                           
         bytes = strip(str)                                                     
                                                                                
           say msgid " "                                                        
           say msgid "Message maximum record size is:" save_lrecl+4             
           say msgid " "                                                        
           say msgid "Message successfully transmitted"                         
           if length(sigdsn) + length(sigddn) > 0 then do                       
                 say msgid "Signature file used:" sigdsn                        
              end                                                               
           if length(disclaim) > 0 then                                         
                 say msgid "Standard Disclaimer used from:" disclaim            
           if debug = "on" then send_msg = "Not-Sent"                           
                           else send_msg = "Sent"                               
           say msgid send_msg out.0+header.0 ,                                  
               "records as text, attachments," ,                                
               "and control information."                                       
           say msgid "Approximate byte count is:" bytes                         
           end                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * All Done - now delete any Created DSNs                *              
         * ----------------------------------------------------- */             
        Address TSO                                                             
        x = msg("off")                                                          
        if length(create_dsns) > 0 then                                         
           do i = 1 to words(create_dsns)                                       
              deldsn = word(create_dsns,i)                                      
              "Delete" deldsn                                                   
              end                                                               
                                                                                
        /* -------------------------- *                                         
         * All Done - Exit rc = 0     *                                         
         * unless an empty ds found   *                                         
         * -------------------------- */                                        
         if empty_ds > 0 then exit 4                                            
         exit 0                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Sub-routines used by the application.                 *              
         * ----------------------------------------------------- */             
                                                                                
        /* ----------------------------------------------------- *              
         * set file info for report and file header              *              
         * ----------------------------------------------------- */             
         set_file_info:                                                         
         parse value "" with type zip suffix z_type                             
         if left(t,2)  = "//" then do                                           
            t  = null                                                           
            tl = null                                                           
            end                                                                 
         parse value t with fmt1 "/" fmt2 "/" fmt3 "/" fmt4 "/" fmt5 ,          
                            "/" fmt6                                            
         parse value tl with fmt1l"/"fmt2l"/"fmt3l"/" . "/" . "/" fmt6          
         fmt1 = strip(fmt1)                                                     
         fmt2 = strip(fmt2)                                                     
         fmt3 = strip(fmt3)                                                     
         fmt4 = strip(fmt4)                                                     
         fmt5 = strip(fmt5)                                                     
         fmt6 = strip(fmt6)                                                     
         fmt1l = strip(fmt1l)                                                   
         fmt2l = strip(fmt2l)                                                   
         fmt3l = strip(fmt3l)                                                   
         Select                                                                 
            When left(fmt1,3) = "ZIP" then do                                   
                 parse value "" with type enrich suffix html_color ,            
                                z_type zip                                      
                 if zip_type = null then do                                     
                    say msgid "The ZIP option is not supported by your"         
                    say msgid "installation. Ending XMITIP. (sorry)"            
                    exit 8                                                      
                    end                                                         
                 if fmt1   = "ZIPHTML" then do                                  
                    type   = "HTML"                                             
                    enrich = "html"                                             
                    suffix = ".html"                                            
                    html_color = fmt3                                           
                    html_fsize = fmt4                                           
                    end                                                         
                 if fmt1   = "ZIPRTF" then do                                   
                    type   = "RTF"                                              
                    suffix = ".rtf"                                             
                    end                                                         
                 if fmt1   = "ZIPBIN"  then do                                  
                    type   = "Binary"                                           
                    z_type = "ZIPBIN"                                           
                    suffix = ".bin"                                             
                    end                                                         
                 if fmt1   = "ZIPPDF" then do                                   
                    type   = "PDF"                                              
                    z_type = "ZIPBIN"                                           
                    suffix = ".pdf"                                             
                    end                                                         
                 if fmt1   = "ZIP"  then do                                     
                    type   = null                                               
                    suffix = ".txt"                                             
                    end                                                         
                 zip  = fmt1                                                    
                 end                                                            
            When fmt1 = "HTML" then do                                          
                 type = fmt1                                                    
                 html_color = fmt2                                              
                 enrich = "html"                                                
                 if fmt3 <> null                                                
                    then suffix = fmt3l                                         
                    else suffix = ".html"                                       
                 html_fsize = fmt4                                              
                 end                                                            
            When fmt1 = "RTF" then do                                           
                 type = fmt1                                                    
                 if fmt5 <> null                                                
                    then suffix = fmt5                                          
                    else suffix = ".rtf"                                        
                    end                                                         
            When fmt1 = "BIN" then do                                           
                 type = "Binary"                                                
                 if fmt2 <> null                                                
                    then suffix = fmt2                                          
                    else suffix = ".bin"                                        
                    end                                                         
            When fmt1 = "PDF" then do                                           
                 type = fmt1                                                    
                 suffix = ".pdf"                                                
                 end                                                            
            When fmt1 = "TXT" then do                                           
                 if fmt2 <> null                                                
                    then suffix = fmt2                                          
                    else suffix = ".txt"                                        
                    end                                                         
            otherwise do                                                        
                      type = null                                               
                      suffix = file_suf                                         
                      end                                                       
            end                                                                 
                                                                                
         if translate(suffix) = "X" then                                        
            suffix = null                                                       
         if suffix <> null then                                                 
            if left(suffix,1) <> "." then                                       
               suffix = "."suffix                                               
                                                                                
         desc = strip(word(filedesc,fd))                                        
         if pos("/",desc) > 0 then                                              
            parse value desc with file_name "/" desc_d                          
         else do                                                                
              file_name = null                                                  
              desc_d = desc                                                     
              end                                                               
         if file_name <> null then do                                           
            say msgid "---------------------------------------------"           
            say msgid "The FILEDESC usage for filename is being"                
            say msgid "changed to FILENAME.  FILEDESC will remain as"           
            say msgid "the keyword for the description."                        
            say msgid "syntax for FILENAME is: FILENAME filename"               
            say msgid "---------------------------------------------"           
            end                                                                 
        if file_name = null then                                                
           file_name = strip(word(filename,fd))                                 
        if translate(file_name) = "X" then                                      
           file_name = null                                                     
                                                                                
        /* --------------------------------------------------------- *          
         * Test file_name for &date, &sdate, or &jdate and fixup.    *          
         * --------------------------------------------------------- */         
        if pos("&",file_name) > 0 then                                          
           Select                                                               
           When pos("&date",file_name) > 0 then do                              
                parse value file_name with lf "&date" rf                        
                file_name = lf""date('s')""rf                                   
                end                                                             
           When pos("&jdate",file_name) > 0 then do                             
                parse value file_name with lf "&jdate" rf                       
                file_name = lf""date('j')""rf                                   
                end                                                             
           When pos("&sdate",file_name) > 0 then do                             
                parse value file_name with lf "&sdate" rf                       
                file_name = lf""right(date('s'),4)""rf                          
                end                                                             
           When pos("&sysid",file_name) > 0 then do                             
                parse value file_name with lf "&sysid" rf                       
                file_name = lf""mvsvar('sysname')""rf                           
                end                                                             
           Otherwise nop                                                        
           end                                                                  
                                                                                
        /* --------------------------------------------------------- *          
         * Compare Filename and Suffix                               *          
         * --------------------------------------------------------- */         
         if length(suffix) > 0 then do                                          
            xl = length(suffix)                                                 
            xf = translate(right(file_name,xl))                                 
            fmtmm = 0                                                           
            Select                                                              
              When left(fmt1,3) = "TXT" then nop                                
              When left(fmt1,3) = "RTF" then                                    
                   if xf <> ".RTF" then fmtmm = 1                               
              When left(fmt1,3) = "PDF" then                                    
                   if xf <> ".PDF" then fmtmm = 1                               
              When left(fmt1,3) = "HTM" then                                    
                   if pos(".HTM",xf) = 0 then fmtmm = 1                         
              When left(fmt1,3) = "ZIP" then                                    
                   if pos(".ZIP",xf) = 0 then fmtmm = 1                         
              Otherwise nop                                                     
              end                                                               
           /* --------------------------- *                                     
            * Now test for a mismatch     *                                     
            * --------------------------- */                                    
            if xf = null then fmtmm = 0                                         
            if fmtmm = 1 then do                                                
               say msgid "> Warning: FILENAME" file_name "and Format" ,         
                   fmt1 "are not the same."                                     
               say msgid "> There may be a mismatch when opening on" ,          
                         "the recipients workstation."                          
               end                                                              
            end                                                                 
                                                                                
         mh. = null                                                             
         if left(fmt1,3) = "ZIP"                                                
            then mh_suf = ".zip"                                                
         else if suffix <> null                                                 
              then mh_suf = suffix                                              
              else mh_suf = null                                                
         if mh_type = "dsn" then do                                             
            if left(file_dsn,1) = "'" then                                      
            name = substr(file_dsn,2,length(file_dsn)-2)""mh_suf                
            else name = file_dsn""mh_suf                                        
            if pos("(",file_dsn) > 1 then do                                    
               parse value file_dsn with . "(" name ")" .                       
               name = '"'strip(name)""mh_suf'"'                                 
               end                                                              
            else name = '"'strip(name)'"'                                       
            end                                                                 
         if mh_type = "ddn" then                                                
              name = '"ddname='file_ddn""mh_suf'"'                              
         if file_name <> null then                                              
              name = '"'file_name'"'                                            
         m_type = "7bit"                                                        
         mh.1 = "--"bnd                                                         
         if pos(translate(right(filename,4)),".HTM HTML") > 0 then do           
             mh.2 = "Content-Type: text/"enrich"; charset="char";"              
            end                                                                 
         else do                                                                
            if type = null then                                                 
               select                                                           
               when charuse = 0 then                                            
                   mh.2 = "Content-Type: text/plain; charset="char";"           
               when charuse = 1 then                                            
                   mh.2 = "Content-Type: text/plain;"                           
               otherwise                                                        
                   mh.2 = "Content-Type: text/plain; charset="char";"           
               end                                                              
            if type = "RTF" then                                                
               select                                                           
               when charuse = 0 then                                            
                   mh.2 = "Content-Type: text/plain; charset="char";"           
               when charuse = 1 then                                            
                   mh.2 = "Content-Type: text/plain;"                           
               otherwise                                                        
                   mh.2 = "Content-Type: text/plain; charset="char";"           
               end                                                              
            if type = "HTML" then do                                            
               mh.2 = "Content-Type: text/enrich; charset="char";"              
               end                                                              
            if translate(left(suffix,4)) = ".HTM" then do                       
               mh.2 = "Content-Type: text/enrich; charset="char";"              
               end                                                              
               end                                                              
         if wordpos(left(fmt1,3),"ZIP BIN PDF") > 0 then do                     
            mh.2 = "Content-Type: application/octet-stream;"                    
            m_type = "base64"                                                   
            end                                                                 
         mh.3 = "              name="name                                       
         mh.4 = "Content-Transfer-Encoding:" m_type                             
         mh.5 = "Content-Disposition: attachment;"                              
         mh.6 = "   filename="name                                              
         if mh_type = "dsn" then                                                
            mh.7 = "Content-Description:" strip(file_dsn,"B","'")               
         else                                                                   
            mh.7 = "Content-Description:" file_ddn""mh_suf                      
         if desc_d <> null then                                                 
            if desc_d <> "x" then                                               
               mh.7 = "Content-Description:" desc_d                             
         mh.8 = " "                                                             
         do i = 1 to 8                                                          
            out.0 = out.0 + 1                                                   
            n = out.0                                                           
            out.n = mh.i                                                        
            end                                                                 
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Test size limit and if we're over exit                *              
         * ----------------------------------------------------- */             
         Test_Limit:                                                            
         over = bytes - size_limit                                              
         if size_limit > 0 then                                                 
            if bytes > size_limit then do                                       
               say msgid "Severe Error: You have exceeded the allowed"          
               say msgid "              size.  Current size:" bytes             
               say msgid "              over by:" over                          
               say msgid "              limit:  " size_limit                    
               exit 8                                                           
               end                                                              
            return                                                              
                                                                                
        /* --------------------------------------------------------- *          
         * Count the bytes in the input file                         *          
         * --------------------------------------------------------- */         
         Count_Bytes:                                                           
         if left(fmt1,3) <> "ZIP" then                                          
            do bytecnt = 1 to in.0                                              
               bytes = bytes + length(in.bytecnt)                               
               end                                                              
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * process the file here                                 *              
         * ----------------------------------------------------- */             
         Process_file:                                                          
              start_out = out.0                                                 
              if printcc = "on" then do_cc = 1                                  
                            else do_cc = 0                                      
              if confirm = null then do                                         
                 as = null                                                      
                 if pos("RTF",fmt1) > 0 then                                    
                    as = "as Rich Text"                                         
                 else if type <> null                                           
                       then as = "as" type                                      
                       else as = fmt1 /* $$$ */                                 
                 if left(fmt1,3) <> "ZIP" then                                  
                    say msgid "-records:" in.0 as                               
                 if fmt1 = null then do                                         
                    say msgid "format defaulting to text."                      
                    say msgid " "                                               
                    end                                                         
                 if file_name <> null then                                      
                    say msgid "as attachment name:" file_name                   
                 end                                                            
              if right(sysrecfm,1) = "A" then do_cc = 1                         
              if right(sysrecfm,1) = "M" then do_cc = 1                         
              if fmt1 = "RTF" then do                                           
                 style    = fmt2                                                
                 size     = fmt3                                                
                 if size = null then size = 9                                   
                 if datatype(size) <> "NUM" then do                             
                    say msgid "Error: Font size of" size ,                      
                              "invalid."                                        
                    say msgid "Ending Process."                                 
                    exit 8                                                      
                    end                                                         
                 paper    = fmt4                                                
                 margins = word(margin,fd)                                      
                 call do_rtf_head                                               
                 end                                                            
              if fmt1 = "PDF" then do                                           
                 pdf = null                                                     
                 if fmt2 = null then                                            
                    fmt2 = def_orient                                           
                 if fmt2 <> null then                                           
                    pdf = "ORIENT" fmt2                                         
                 if fmt3 = null then                                            
                    fmt3 = font_size                                            
                 if fmt3 <> null then                                           
                    pdf = pdf "FONT" fmt3                                       
                 if fmt4 <> null then                                           
                    pdf = pdf "PAPER" fmt4                                      
                 if fmt5 <> null then                                           
                    pdf = pdf "LPI" fmt5                                        
                 if confirm <> null then do                                     
                    say msgid "Orientation:" fmt2                               
                    say msgid "Font size:  " fmt3                               
                    say msgid "Paper size: " fmt4                               
                    say msgid "LPI:        " fmt5                               
                    end                                                         
                 call do_pdf                                                    
                 end                                                            
              if fmt1 = "ZIPPDF" then do                                        
                 pdf = null                                                     
                 if fmt3 = null then                                            
                    fmt3 = def_orient                                           
                 if fmt3 <> null then                                           
                    pdf = "ORIENT" fmt3                                         
                 if fmt4 = null then                                            
                    fmt4 = font_size                                            
                 if fmt4 <> null then                                           
                    pdf = pdf "FONT" fmt4                                       
                 if fmt5 <> null then                                           
                    pdf = pdf "PAPER" fmt5                                      
                 if fmt6 <> null then                                           
                    pdf = pdf "LPI" fmt6                                        
                 if confirm <> null then do                                     
                    say msgid "Orientation:" fmt3                               
                    say msgid "Font size:  " fmt4                               
                    say msgid "Paper size: " fmt5                               
                    say msgid "LPI:        " fmt6                               
                    end                                                         
                 call do_pdf                                                    
                 end                                                            
              if fmt1 = "ZIPRTF" then do                                        
                 style    = fmt3                                                
                 size     = fmt4                                                
                 if size = null then size = 9                                   
                 if datatype(size) <> "NUM" then do                             
                    say msgid "Error: Font size of" size ,                      
                              "invalid."                                        
                    say msgid "Ending Process."                                 
                    exit 8                                                      
                    end                                                         
                 paper    = fmt5                                                
                 margins = word(margin,fd)                                      
                 call do_rtf_head                                               
                 end                                                            
              if pos("HTML",translate(fmt1)) > 0 then call do_html              
              if pos(left(type,3),"ZIP Bin PDF HTM") = 0 then do                
                 bytes = save_bytes                                             
                 do i = 1 to in.0                                               
                    skip_record = 0                                             
                    if pos("RTF",fmt1) > 0 then call do_rtf                     
                    else if do_cc = 1 then call do_cc                           
                    if skip_record = 1 then iterate                             
                    out.0 = out.0 + 1                                           
                    n = out.0                                                   
                    if length(in.i) = 0 then in.i = " "                         
                    if left(in.i,1) = "." then                                  
                       in.i = "."in.i                                           
                    out.n = in.i                                                
                    save_lrecl = max(length(out.n),save_lrecl)                  
                    if save_lrecl > 1024 then signal big_lrecl                  
                    if left(fmt1,3) <> "ZIP" then                               
                       bytes = bytes + length(in.i)                             
                    end                                                         
                 call test_limit                                                
                 end                                                            
              if pos("RTF",fmt1) > 0 then call do_rtf_end                       
              if left(fmt1,3) = "ZIP" then do                                   
                 if wordpos(fmt1,"ZIP ZIPRTF ZIPPDF ZIPHTML") > 0 then          
                    suf = strip(substr(fmt1,4))                                 
                 else suf = "bin"                                               
                    fi = 0                                                      
                    lrec = 0                                                    
                    if wordpos(fmt1,"ZIPBIN ZIPPDF") = 0 then do                
                       drop in.                                                 
                       bytes = save_bytes                                       
                       do fo = start_out+1 to out.0                             
                          fi = fi + 1                                           
                          in.fi = out.fo                                        
                          len = length(in.fi)                                   
                          if len = 0 then in.fi = " "                           
                          if lrec <= len then                                   
                             lrec = len                                         
                          out.fo = null                                         
                          end                                                   
                       out.0 = start_out                                        
                       in.0 = fi                                                
                       end                                                      
                    else do fi = 1 to in.0                                      
                          len = length(in.fi)                                   
                          if len = 0 then in.fi = " "                           
                          if lrec <= len then                                   
                             lrec = len                                         
                         end                                                    
                    if suf = null then suf = "txt"                              
                    zipwork = "'"hlq".zipwork."eddd"."suf"'"                    
                    call msg "off"                                              
                    "Delete" zipwork                                            
                    "Alloc f("eddd") ds("zipwork") new tr" ,                    
                       "Spa(300,600) Recfm(V B) lrecl("lrec+8")" ,              
                         "Blksize(0) reuse"                                     
                    "Execio * diskw" eddd "(Finis stem in."                     
                    "Free f("eddd")"                                            
                 if mh_type = "ddn" then                                        
                    file_dsn = "DD:"file_ddn                                    
                 save_file_dsn = file_dsn                                       
                 file_dsn = zipwork                                             
                 if confirm = null then do                                      
                    say msgid " zip'ing file" save_file_dsn                     
                    if fmt2l <> null then                                       
                       if zip_type = "PKZIP" then                               
                       say msgid " with name-in-archive of" fmt2l               
                       else                                                     
                       say msgid " name-in-archive of" fmt2l ,                  
                                 "not supported by" zip_type"," ,               
                                 "using data set name."                         
                    end                                                         
                 save_bytes = bytes                                             
                 call do_zip                                                    
                 type = "Binary"                                                
                 "Delete" zipwork                                               
                 end                                                            
              if type = "Binary" then do                                        
                 save_bytes = bytes                                             
                 call do_base64                                                 
                 end                                                            
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Test validity (as much as we can) of e-mail address   *              
         * ldap = 2 when set indicates an invalid address        *              
         * ----------------------------------------------------- */             
        Test_Address: Procedure Expose test_address msgid domain ,              
                                       append_domain null trc ldap ,            
                                       temp_address atsign                      
        parse arg temp_address field                                            
        inv = 0                                                                 
        trc = 0                                                                 
        if left(temp_address,1) = "*" then return                               
        /*FEC 20010423: AtSign Support */                                       
        if pos(AtSign,temp_address) = 0 then do                                 
           if append_domain = null then inv = 1                                 
           else do                                                              
        /*FEC 20010423: AtSign Support */                                       
                temp_address = temp_address||AtSign||append_domain              
                trc = 1                                                         
                end                                                             
           end                                                                  
        /*FEC 20010423: AtSign Support */                                       
        p1 = pos(AtSign,temp_address)                                           
        if pos(AtSign,temp_address,p1+1) > 0 then inv = 1                       
        if pos(":",temp_address,p1+1) > 0 then inv = 0                          
        if inv = 0 & ldap <> 1 then do                                          
              x_rc = xmitipid(temp_address)                                     
              Select                                                            
                 when x_rc = 4 then do                                          
                      say msgid "Error:" temp_address ,                         
                                "is an invalid e-mail address",                 
                                "in Parameter:" field                           
                      ldap = 2                                                  
                      end                                                       
                 when x_rc = 8 then do                                          
                      say msgid "Unable to validate e-mail address",            
                                "LDAP Server unavailable"                       
                      ldap = 1                                                  
                      end                                                       
                 otherwise nop                                                  
                 end                                                            
           end                                                                  
        if inv = 1 then do                                                      
        /*FEC 20010423: AtSign Support */                                       
           say msgid "Invalid address ("temp_address") was specified"           
           say msgid "The address must be of the format",                       
                      "userid"||AtSign||"lan.internet.address"                  
           say msgid "for example:" sysvar('sysuid')||AtSign||domain            
           exit 8                                                               
           end                                                                  
         Return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_PDF:                                               *              
         * Convert the input file into Adobe Acrobat PDF format. *              
         * ----------------------------------------------------- */             
         Do_PDF:                                                                
         margins = word(margin,fd)                                              
         parse value margins with left "/" right "/" top "/" bottom             
         left   = strip(left)                                                   
         right  = strip(right)                                                  
         top    = strip(top)                                                    
         bottom = strip(bottom)                                                 
         if left   = null then left   = mleft                                   
         if right  = null then right  = mright                                  
         if top    = null then top    = mtop                                    
         if bottom = null then bottom = mbottom                                 
         if confirm = null then do                                              
            say msgid "Margins:    " left right top bottom                      
            say msgid " "                                                       
            end                                                                 
         pdf_count = pdf_count + 1                                              
         pdf_in  = "'"hlq".PDFWork.pdf"pdf_count".txt'"                         
         pdf_out = "'"hlq".PDFWork.pdf"pdf_count".pdf'"                         
         call msg "off"                                                         
         Address TSO                                                            
         "Delete" pdf_in                                                        
         "Delete" pdf_out                                                       
         lrec = 0                                                               
         do flr = 1 to in.0                                                     
            if length(in.flr) > lrec                                            
               then lrec = length(in.flr)                                       
            if length(in.flr) = 0                                               
               then in.flr = " "                                                
            end                                                                 
         "Alloc f("eddd") ds("pdf_in") new" ,                                   
            "Spa(300,300) Recfm(V B) lrecl("lrec+8")" ,                         
              "Blksize(0) reuse"                                                
         "Execio * diskw" eddd "(Finis stem in."                                
         "Free f("eddd")"                                                       
         if left <> null then                                                   
            pdf = pdf "LM" left                                                 
         if right <> null then                                                  
            pdf = pdf "RM" right                                                
         if top <> null then                                                    
            pdf = pdf "TM" top                                                  
         if bottom <> null then                                                 
            pdf = pdf "BM" bottom                                               
         if do_cc = 1 then                                                      
            pdf = pdf "CC Yes"                                                  
         "%xmitippd in" pdf_in ,                                                
            "out" pdf_out ,                                                     
            pdf                                                                 
         "Alloc f("eddd") ds("pdf_out") shr reuse"                              
         "Execio * diskr" eddd "(Finis stem in."                                
         "Free f("eddd")"                                                       
         "Delete" pdf_in                                                        
         "Delete" pdf_out                                                       
         Address ISPExec                                                        
         type = "Binary"                                                        
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_RTF_Head Routine.                                  *              
         * put out rtf headers                                   *              
         * -------------------------                             *              
         * The paperw/etc numbers are in twips. 1440 per inch.   *              
         * ----------------------------------------------------- */             
         Do_RTF_Head:                                                           
                                                                                
         parse value margins with left "/" right "/" top "/" bottom             
                                                                                
         if left   = null then left   = mleft                                   
         if right  = null then right  = mright                                  
         if top    = null then top    = mtop                                    
         if bottom = null then bottom = mbottom                                 
                                                                                
         left   = trunc(left   * 1440)                                          
         right  = trunc(right  * 1440)                                          
         top    = trunc(top    * 1440)                                          
         bottom = trunc(bottom * 1440)                                          
         style  = strip(translate(style))                                       
                                                                                
         if style = null then style = def_orient                                
         if size  = null then size  = font_size                                 
                                                                                
        /* ----------------------------------------------------- *              
         * setup the paper size values (width/height)            *              
         * ----------------------------------------------------- */             
         paper = strip(translate(paper))                                        
         if length(paper) = 0 then paper = translate(paper_size)                
         width  = 12240                                                         
         Select                                                                 
            when pos("X",paper) > 0 then do                                     
                 parse value paper with w "X" h                                 
                 height = h * 1440                                              
                 width  = w * 1440                                              
                 if pos('.',height)> 0 then                                     
                    parse value height with height '.' .                        
                 if pos('.',width) > 0 then                                     
                    parse value width with width '.' .                          
                 end                                                            
            when abbrev("LETTER",paper,3) = 1 then height = 15840               
            when abbrev("LEGAL",paper,3) = 1 then height = 20160                
            When paper = "LTR" then height = 15840                              
            When paper = "LGL" then height = 20160                              
            When paper = "A4"  then do                                          
                 width  = 11908                                                 
                 height = 16833                                                 
                 end                                                            
            otherwise do                                                        
                      if strip(paper) <> null then                              
                      say msgid "Invalid paper size:" paper ,                   
                                "default Letter used."                          
                      height = 15840                                            
                      end                                                       
            end                                                                 
                                                                                
         if confirm = null then do                                              
            Say msgid "Paper:  " paper                                          
            Say msgid "Margins:" left right top bottom                          
            say msgid "Font:   " size                                           
            if left(style,1) = "L" then                                         
                say msgid "Style:   Landscape"                                  
            else                                                                
                say msgid "Style:   Portrait"                                   
            say msgid " "                                                       
            end                                                                 
                                                                                
         n = out.0 + 1                                                          
         out.n = "{\rtf1\ansi\ansicpg1252\deff0\deftab720"                      
         n     = n + 1                                                          
         out.n = "{\fonttbl{\f0\fmodern" font";}}"                              
         if left(style,1) = "L" then do                                         
             n      = n + 1                                                     
             out.n  = "\landscape"                                              
             h      = width                                                     
             width  = height                                                    
             height = h                                                         
             end                                                                
         n     = n + 1                                                          
         out.n = "\paperw"width"\paperh"height                                  
         n     = n + 1                                                          
         out.n = "\margl"left"\margr"right"\margt"top"\margb"bottom             
         n     = n + 1                                                          
         out.n = "\deflang1033\horzdoc"                                         
         n     = n + 1                                                          
         /* size is in 1/2 points thus 18 = 9 points */                         
         if size = null then size = 18                                          
                        else size = size*2                                      
         out.n = "\pard\plain\f0\fs"trunc(size)                                 
         out.0 = n                                                              
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_HTML      Routine (base on idea/code from          *              
         *                  Leland Lucius)                       *              
         * Add basic html page header.                           *              
         * If Do_CC  = 1 then do:                                *              
         * Convert 1 in column 1 to horizontal line              *              
         * Convert 0 in column 1 to a blank line then data line  *              
         * Convert - in column 1 to 2 blank lines then data line *              
         * Convert non-blank col 1 to a blank line then data line*              
         * if + then merge data into previous line               *              
         * Shifts data left 1 column to remove cc                *              
         * ----------------------------------------------------- */             
         Do_HTML:                                                               
         background = "white"                                                   
         if html_color = null then do                                           
            text       = "black"                                                
            end                                                                 
         if pos("-",html_color) > 0 then                                        
            parse value html_color with background "-" text                     
         else text = html_color                                                 
                                                                                
         /* --------------------------------------------------- *               
          * Now fixup the color in case abbreviations were used */              
         text       = fix_color(text)                                           
         background = fix_color(background)                                     
         if background = null then background = "White"                         
         if text       = null then text       = "Black"                         
         n = out.0 + 1                                                          
         out.n = '<HTML><HEAD>'                                                 
         if word(filedesc,fd) <> null then do                                   
            n = n + 1                                                           
            out.n = "<title>"word(filedesc,fd)"</title>"                        
            end                                                                 
         n = n + 1                                                              
         out.n = "<STYLE>"                                                      
         n = n + 1                                                              
         out.n = " BODY { BACKGROUND:" background"; } </STYLE></HEAD>"          
         n = n + 1                                                              
         out.n = "<BODY><PRE>"                                                  
         n = n + 1                                                              
         if html_fsize <> null then                                             
            text = text "Size="html_fsize                                       
         out.n = "<FONT color="text">"                                          
         cc = " "                                                               
         do i = 1 to in.0                                                       
            save_lrecl = max(save_lrecl,length(out.n))                          
            if save_lrecl > 1024 then signal big_lrecl                          
            if do_cc = 1 then do                                                
               cc = left(in.i,1)                                                
               if length(in.i) > 1 then                                         
                  in.i = substr(in.i,2)                                         
               else in.i = " "                                                  
               end                                                              
                                                                                
           /* ----------------------------------------------------- *           
            * Translate <>"& characters to &lt, &gt, &quot, &amp    *           
            * ----------------------------------------------------- */          
            tranlen = length(in.i)                                              
            tranfrom = '&<>"'                                                   
            tranto   = "&amp; &lt; &gt; &quot;"                                 
            do tranc = 1 to length(tranfrom)                                    
               transt = 1                                                       
               tranchar = substr(tranfrom,tranc,1)                              
               do forever                                                       
                  if pos(tranchar,in.i,transt) = 0 then iterate tranc           
                  tranpos =  pos(tranchar,in.i,transt)                          
                  transt = tranpos + 2                                          
                  tranleft = left(in.i,tranpos-1)                               
                  tranright = substr(in.i,tranpos+1)                            
                  in.i = tranleft""word(tranto,tranc)""tranright                
                  end                                                           
               end                                                              
                                                                                
            Select                                                              
              When cc = "1" then do                                             
                   n = n + 1                                                    
                   out.n = "</PRE><HR><PRE>"                                    
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = "0" then do                                             
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = "-" then do                                             
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = " " then do                                             
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = "+" then do                                             
                   ip = i - 1                                                   
                   in.i = substr(in.i,2,length(in.i))                           
                   l1 = length(out.n)                                           
                   if in.i <> out.n then                                        
                      do c = 1 to l1                                            
                         c1 =  substr(in.i,c,1)                                 
                         if substr(out.n,c,1) = " " then                        
                            out.n = overlay(c1,out.n,c)                         
                         end                                                    
                   end                                                          
        /* --------------------------------------------------------- *          
         * Process Machine Carriage Control - revised & corrected    *          
         * --------------------------------------------------------- */         
              When cc = '89'x then do         /* Before Top of page */          
                   n = n + 1                                                    
                   out.n = "</PRE><HR><PRE>"                                    
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   n = n + 1                                                    
                   out.n = ' '                                                  
                   end                                                          
              When cc = '8B'x then do         /* After Top of page */           
                   n = n + 1                                                    
                   out.n = ' '                                                  
                   n = n + 1                                                    
                   out.n = "</PRE><HR><PRE>"                                    
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = '11'x then do         /* Before 2           */          
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   n = n + 1                                                    
                   out.n = "   "                                                
                   end                                                          
              When cc = '13'x then do         /* After 2           */           
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = '19'x then do         /* Before 3           */          
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = "   "                                                
                   end                                                          
              When cc = '1B'x then do         /* After 3            */          
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = '09'x then do         /* Before 1           */          
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = '0B'x then do         /* After 1           */           
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              When cc = '01'x then do         /* Before 0           */          
                   l1 = length(out.n)                                           
                   l2 = length(in.i)                                            
                   if l1 < l2 then out.n = left(out.n,l2,' ')                   
                   if in.i <> out.n then                                        
                      do c = 1 to l2                                            
                         c1 =  substr(in.i,c,1)                                 
                         if substr(in.i,c,1) <> " " then                        
                            out.n = overlay(c1,out.n,c)                         
                         end                                                    
                   end                                                          
              When cc = '03'x then do         /* Before 0           */          
                   l1 = length(out.n)                                           
                   l2 = length(in.i)                                            
                   if l1 < l2 then out.n = left(out.n,l2,' ')                   
                   if in.i <> out.n then                                        
                      do c = 1 to l2                                            
                         c1 =  substr(in.i,c,1)                                 
                         if substr(out.n,c,1) <> " " then                       
                            out.n = overlay(c1,out.n,c)                         
                         end                                                    
                   end                                                          
              Otherwise do                                                      
                   n = n + 1                                                    
                   out.n = "   "                                                
                   n = n + 1                                                    
                   out.n = in.i                                                 
                   end                                                          
              end                                                               
            end                                                                 
         n = n + 1                                                              
         out.n = "</PRE></BODY></HTML>"                                         
         n = n + 1                                                              
         out.n = "  "                                                           
         out.0 = n                                                              
                                                                                
         if confirm = null then do                                              
            Say msgid "Text:      " text                                        
            Say msgid "Background:" background                                  
            say msgid " "                                                       
            end                                                                 
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_RTF Routine                                        *              
         * setup rtf record                                      *              
         *                                                       *              
         * If Do_CC  = 1 then:                                   *              
         *  1 in column 1 gets page eject                        *              
         *    except for the first record in the file            *              
         *  0 in column 1 gets space 1 line                      *              
         *  - in column 1 gets space 2 lines                     *              
         *  + in column 1 gets data merged into previous line    *              
         *  other in col 1 treated as a 0                        *              
         * ----------------------------------------------------- */             
         Do_RTF:                                                                
         /* convert \ { and } so they will print */                             
        Call RTFXlate in.i                                                      
        in.i = strout                                                           
                                                                                
         /* - insert the RTF control */                                         
         if do_cc = 1 then                                                      
         Select                                                                 
            when left(in.i,1) = "1" then                                        
                 if i > 1 then                                                  
                    in.i = "\page" substr(in.i,2)                               
                 else                                                           
                    in.i = substr(in.i,2)                                       
            when left(in.i,1) = "0" then                                        
                 in.i = "\line\par" substr(in.i,2)                              
            when left(in.i,1) = "-" then                                        
                 in.i = "\line\line\par" substr(in.i,2)                         
            when left(in.i,1) = "+" then do                                     
                 parse value out.n with rh i1                                   
                 l1 = length(i1)                                                
                 i2 = substr(in.i,2,length(in.i))                               
                 if i1 <> i2 then                                               
                    do c = 1 to l1                                              
                       c1 =  substr(i2,c,1)                                     
                       if substr(i1,c,1) = " " then                             
                          i1 = overlay(c1,i1,c)                                 
                       end                                                      
                 out.n = rh i1                                                  
                 skip_record = 1                                                
                 end                                                            
            when left(in.i,1) = " " then                                        
                 in.i = "\par" substr(in.i,2)                                   
        /* --------------------------------------------------------- *          
         * Process Machine Carriage Control - revised & corrected    *          
         * --------------------------------------------------------- */         
            when left(in.i,1) = '89'x then do                                   
                 if i > 1 then                                                  
                    in.i = substr(in.i,2) "\page"                               
                 else                                                           
                    in.i = substr(in.i,2)                                       
                 end                                                            
            when left(in.i,1) = '8B'x then                                      
                 if i > 1 then                                                  
                    in.i = "\page" substr(in.i,2)                               
                 else                                                           
                    in.i = substr(in.i,2)                                       
            when left(in.i,1) = '11'x then                                      
                 in.i = substr(in.i,2) "\line\par"                              
            when left(in.i,1) = '13'x then                                      
                 in.i = "\line\par" substr(in.i,2)                              
            when left(in.i,1) = '19'x then                                      
                 in.i = substr(in.i,2) "\line\line\par"                         
            when left(in.i,1) = '1B'x then                                      
                 in.i = "\line\line\par" substr(in.i,2)                         
            otherwise in.i = "\par" substr(in.i,2)                              
            end                                                                 
         else in.i = "\par" in.i                                                
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_RTF_End Routine                                    *              
         * put out rtf trailer                                   *              
         * ----------------------------------------------------- */             
         Do_RTF_End:                                                            
         n = out.0 + 1                                                          
         out.n = "\par }}"                                                      
         out.0 = n                                                              
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Do_CC routine.                                        *              
         * Update output line in attachments for printing on     *              
         * ascii printers.  Converts ASA carriage control or     *              
         * Machine carriage control accordingly.                 *              
         * ----------------------------------------------------- */             
         Do_CC:                                                                 
         if pos("RTF",fmt1) > 0 then return                                     
         Select                                                                 
            when left(in.i,1) = " " then                                        
                 in.i = substr(in.i,2)                                          
            when left(in.i,1) = "1" then do                                     
                 if i > 1 then                                                  
                    in.i = ff""substr(in.i,2)                                   
                 else                                                           
                    in.i = " "substr(in.i,2)                                    
                 end                                                            
            when left(in.i,1) = "0" then do                                     
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            when left(in.i,1) = "+" then do                                     
                 ip = i - 1                                                     
                 in.i = substr(in.i,2)                                          
                 l1 = length(out.n)                                             
                 if in.i <> out.n then                                          
                    do c = 1 to l1                                              
                       c1 =  substr(in.i,c,1)                                   
                       if substr(out.n,c,1) = " " then                          
                          out.n = overlay(c1,out.n,c)                           
                       end                                                      
                 skip_record = 1                                                
                 end                                                            
            when left(in.i,1) = "-" then do                                     
                 call do_cc_add                                                 
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            /* Machine Carriage Control by ISOS */                              
            when left(in.i,1) = '09'x then    /* before 1           */          
                 in.i = substr(in.i,2)                                          
            when left(in.i,1) = '0B'x then    /* before 1           */          
                 in.i = substr(in.i,2)                                          
            when left(in.i,1) = '89'x then do /* Before Top of page */          
                 if i > 1 then                                                  
                    in.i = ff""substr(in.i,2)                                   
                 else                                                           
                    in.i = " "substr(in.i,2)                                    
                 end                                                            
            when left(in.i,1) = '8B'x then do /* Before Top of page */          
                 if i > 1 then                                                  
                    in.i = ff""substr(in.i,2)                                   
                 else                                                           
                    in.i = " "substr(in.i,2)                                    
                 end                                                            
            when left(in.i,1) = '11'x then do /* Before 2           */          
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            when left(in.i,1) = '13'x then do /* Before 2           */          
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            when left(in.i,1) = '01'x then do /* Before 0           */          
                 ip = i - 1                                                     
                 in.i = substr(in.i,2)                                          
                 l1 = length(out.n)                                             
                 if in.i <> out.n then                                          
                    do c = 1 to l1                                              
                       c1 =  substr(in.i,c,1)                                   
                       if substr(out.n,c,1) = " " then                          
                          out.n = overlay(c1,out.n,c)                           
                       end                                                      
                 skip_record = 1                                                
                 end                                                            
            when left(in.i,1) = '03'x then do /* Before 0           */          
                 ip = i - 1                                                     
                 in.i = substr(in.i,2)                                          
                 l1 = length(out.n)                                             
                 if in.i <> out.n then                                          
                    do c = 1 to l1                                              
                       c1 =  substr(in.i,c,1)                                   
                       if substr(out.n,c,1) = " " then                          
                          out.n = overlay(c1,out.n,c)                           
                       end                                                      
                 skip_record = 1                                                
                 end                                                            
            when left(in.i,1) = '19'x then do /* Before 3           */          
                 call do_cc_add                                                 
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            when left(in.i,1) = '1B'x then do /* Before 3           */          
                 call do_cc_add                                                 
                 call do_cc_add                                                 
                 in.i = substr(in.i,2)                                          
                 end                                                            
            otherwise do                                                        
                      call do_cc_add                                            
                      in.i = substr(in.i,2)                                     
                      end                                                       
            end                                                                 
          return                                                                
                                                                                
        /* -------------------------- *                                         
         * Add blank line             *                                         
         * -------------------------- */                                        
          Do_CC_Add:                                                            
             out.0 = out.0 + 1                                                  
             n = out.0                                                          
             out.n = "    "                                                     
             return                                                             
                                                                                
        /* ----------------------------------------------------- *              
         * Process the AddressFile/AddressFileDD data            *              
         * ----------------------------------------------------- */             
         Process_Address_File:                                                  
         use_address = null                                                     
         address = strip(address)                                               
         if left(address,1) = "*" then                                          
            if length(address) > 1                                              
               then use_address = 1                                             
               else address = null                                              
         do i = 1 to addr.0                                                     
            parse value addr.i with w1 waddr                                    
            w1 = translate(word(addr.i,1))                                      
            Select                                                              
              when left(waddr,1) = '"' then do                                  
                   pl   = pos(">",waddr)                                        
                   xaddr = left(waddr,pl)                                       
                   end                                                          
              when left(waddr,1) = "'" then do                                  
                   pl   = pos(">",waddr)                                        
                   xaddr = left(waddr,pl)                                       
                   end                                                          
              otherwise xaddr = waddr                                           
              end                                                               
            if pos("<",xaddr) = 0 then                                          
               naddr = null                                                     
            else                                                                
               parse value waddr with naddr "<" xaddr ">"                       
            Select                                                              
              When w1 = "TO:"  then w1 = "TO"                                   
              When w1 = "CC:"  then w1 = "CC"                                   
              When w1 = "BCC:" then w1 = "BCC"                                  
              otherwise nop                                                     
              end                                                               
            if w1 = "TO" then                                                   
               if use_address = 1 then w1 = "CC"                                
            Select                                                              
               when w1 = "TO" then do                                           
                    w  = words(address) + 1                                     
                    address = address xaddr                                     
                    address_n.w = strip(naddr)                                  
                    end                                                         
               when w1 = "CC" then do                                           
                    w  = words(cc) + 1                                          
                    cc = cc xaddr                                               
                    cc_n.w = strip(naddr)                                       
                    end                                                         
               when w1 = "BCC" then bcc    = bcc xaddr                          
               otherwise nop                                                    
               end                                                              
            end                                                                 
            address = strip(address)                                            
            cc      = strip(cc)                                                 
            bcc     = strip(bcc)                                                
            Return                                                              
                                                                                
        /* ----------------------------------------------------- *              
         * If lrecl > 1024 then exit with error message          *              
         * because of the IBM TCP/IP SMTP Server Limitation      *              
         * ----------------------------------------------------- */             
        big_lrecl:                                                              
           say msgid "Error: The IBM TCP/IP SMTP Server does not"               
           say msgid "support data that is larger than lrecl 1024. The"         
           say msgid "lrecl calculated so far is:" save_lrecl                   
           say msgid "Process is now terminating....."                          
           exit 8                                                               
                                                                                
        /* =============================================================        
        || Procedure:     Base64      : Sends binary data after                 
        ||                            : converting to base64.                   
        || =============================================================        
        */                                                                      
        do_Base64:                                                              
          bdd = "X"right(time('l'),2)""right(time('l'),4)                       
          space = (in.0 * save_lrecl)%34000                                     
          space = space + 30                                                    
          space = space","space                                                 
          if left(fmt1,3) = "ZIP" then                                          
             zipbasei = file_dsn                                                
          else do                                                               
               zipbasei = "'"hlq".zipwork."bdd".in'"                            
              do lr = 1 to in.0                                                 
                 if length(in.lr) > save_lrecl                                  
                    then save_lrecl = length(in.lr)                             
                 end                                                            
              "Alloc f("bdd") ds("zipbasei") spa("space")" ,                    
                    "tr recfm(v b) lrecl("save_lrecl+4") blksize(0)"            
              "Execio * diskw" bdd "(finis stem in."                            
              "Free  f("bdd")"                                                  
               end                                                              
          call listdsi zipbasei                                                 
          zipbaseo = "'"hlq".zipwork."bdd".out'"                                
          if left(sysunits,2) = "BL" then do                                    
             sysunits = "  "                                                    
             blksize = "Block(7600)"                                            
             end                                                                
          else blksize = "blksize(0)"                                           
          "Alloc f("bdd") ds("zipbaseo") new" ,                                 
            left(sysunits,2) "spa("sysalloc","sysseconds")" ,                   
            "recfm(f b) lrecl(76)" blksize                                      
          "Free  f("bdd")"                                                      
          "Alloc f(encodin) ds("zipbasei") shr"                                 
          "Alloc f(encodout) ds("zipbaseo") shr"                                
          "Alloc f(sysout) dummy"                                               
          if b64_load = null then                                               
             Address AttchPGM "xmitb64"                                         
          else "Call" b64_load                                                  
          x_rc = rc                                                             
          if x_rc <> 0 then do                                                  
             call msg "off"                                                     
             "Free f(sysout encodin encodout) delete"                           
             say msgid "Error in mime encoding routine." ,                      
                       "Return code:" x_rc                                      
             say msgid "Terminating."                                           
             say msgid "Contact your XMITIP Support."                           
             exit 8                                                             
             end                                                                
          "Free f(sysout)"                                                      
          "Alloc f("bdd") ds("zipbaseo") shr"                                   
          "Execio * diskr" bdd "(finis stem encode."                            
          "Free f("bdd")"                                                       
          call msg 'off'                                                        
          "Delete" zipbaseo                                                     
          "Del" zipbasei                                                        
          b64o = out.0 + 0                                                      
          save_bytes = bytes                                                    
          do b64 = 1 to encode.0                                                
             b64o = b64o + 1                                                    
             out.b64o = encode.b64                                              
             bytes = bytes + length(encode.b64)                                 
             end                                                                
          out.0 = b64o                                                          
          call test_limit                                                       
          return                                                                
                                                                                
        /* ----------------------------------------------------- *              
         * Process Address                                       *              
         * ----------------------------------------------------- */             
        Process_Address: Procedure Expose t_names. t_addrs  msgid               
        parse arg address                                                       
                                                                                
        /* ----------------------------------------------------- *              
         * Remove parens                                         */             
         if left(address,1) = "(" then                                          
            parse value address with "(" address                                
         if right(address,1) = ")" then                                         
            parse value address with address ")"                                
         address = strip(address)                                               
                                                                                
        /* ----------------------------------------------------- *              
         * Test for parenthesis                                  */             
          parens = 0                                                            
          if pos("(",address) > 1 then parens = 1                               
          if pos(")",address) > 1 then parens = 1                               
          if parens = 1 then do                                                 
             say msgid "Error in address:" address                              
             say msgid "                   includes '(' or ')'" ,               
             say msgid "                   which is invalid"                    
             exit 8                                                             
             end                                                                
                                                                                
        /* ----------------------------------------------------- *              
         * set up our variables                                  */             
         t_addrs = ""                                                           
         t_names. = ""                                                          
         t_names.0 = 0                                                          
         tn = 0                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Now process thru the provided address                 *              
         * ----------------------------------------------------- */             
        do until length(address) = 0                                            
              Select                                                            
                /* -------------------------------------------------- *         
                 * No name just an address in <>                      *         
                 * e.g. <first.last@address>                          */        
                when left(address,1) = '<' then do                              
                     tn = tn + 1                                                
                     parse value address with "<" addr ">" address              
                     t_addrs = t_addrs addr                                     
                     address = strip(address)                                   
                     end                                                        
                /* -------------------------------------------------- *         
                 * double quotes                                      *         
                 * e.g. "first last" <first.last@address>             */        
                when left(address,1) = '"' then do                              
                     right = pos(">",address)                                   
                     if right = 0 then                                          
                        if pos("<",address) > 1                                 
                          then do                                               
                               address = address">"                             
                               right = pos(">",address)                         
                               end                                              
                          else right = length(address)                          
                     data = left(address,right)                                 
                     x = length(address)                                        
                     address = substr(address,right+1)                          
                     address = strip(address)                                   
                     tn = tn + 1                                                
                     parse value data with '"' t_names.tn '"' .                 
                     parse value data with . "<" addr ">" .                     
                     t_addrs = t_addrs addr                                     
                     end                                                        
                /* -------------------------------------------------- *         
                 * single quotes                                      *         
                 * e.g. 'first last' <first.last@address>             */        
                when left(address,1) = "'" then do                              
                     right = pos(">",address)                                   
                     if right = 0 then                                          
                        if pos("<",address) > 1                                 
                          then do                                               
                               address = address">"                             
                               right = pos(">",address)                         
                               end                                              
                          else right = length(address)                          
                     data = left(address,right)                                 
                     address = substr(address,right+1)                          
                     address = strip(address)                                   
                     tn = tn + 1                                                
                     parse value data with "'" t_names.tn "'" .                 
                     parse value data with . "<" addr ">" .                     
                     t_addrs = t_addrs addr                                     
                     end                                                        
                /* ---------------------------------------------------*         
                 * Only 1 word so must be an address                  */        
                when words(address) = 1 then do                                 
                     tn = tn + 1                                                
                     t_addrs = t_addrs address                                  
                     address = ""                                               
                     end                                                        
                /* ---------------------------------------------------*         
                 * Only 1 word so must be an address                  */        
                when pos(">",address) = 0 then do                               
                     tn = tn + 1                                                
                     t_addrs = t_addrs address                                  
                     address = ""                                               
                     end                                                        
                /* ---------------------------------------------------*         
                 * otherwise assume name with no quotes               *         
                 * e.g. first last <first.last@address>               */        
                otherwise do                                                    
                     right = pos(">",address)                                   
                     data = left(address,right)                                 
                     address = substr(address,right+1)                          
                     address = strip(address)                                   
                     tn = tn + 1                                                
                     parse value data with t_names.tn "<" .                     
                     parse value data with . "<" addr ">" .                     
                     t_addrs = t_addrs addr                                     
                     end                                                        
                end                                                             
              end                                                               
              t_names.0 = tn                                                    
              return                                                            
                                                                                
        /* ----------------------------------------------------- *              
         * Create_file: create a file attachment using ISPF      *              
         *              Edit                                     *              
         * ----------------------------------------------------- */             
         Create_File:                                                           
            if sysvar('sysispf') <> "ACTIVE" then do                            
               say msgid "* specified for attachment data set," ,               
                         "but ISPF is not active."                              
               say msgid "Try again when under ISPF."                           
               exit 8                                                           
               end                                                              
            parse value t with cr1 "/" cr2 "/" .                                
            Select                                                              
              When abbrev("HTML",cr2,3) = 1                                     
               then do                                                          
                    cs = "HTML"                                                 
                    enrich = "html"                                             
                    end                                                         
               otherwise do                                                     
                    cs = "TXT"                                                  
                    enrich = "plain"                                            
                    end                                                         
                    end                                                         
            create_suf = "XMIT"right(time('l'),4)"."cs                          
            create_dsn = hlq"."create_suf                                       
            create_dsn = "'"create_dsn"'"                                       
            Address TSO,                                                        
              "Alloc ds("create_dsn") new spa(15,90) tr",                       
                 "Recfm(v b) lrecl("create_dsn_lrecl")" ,                       
                 "blksize(9004)",                                               
                 "Unit(sysda) f("eddd")"                                        
            if enrich = "html" then do                                          
               o.1 = "<html><body><pre>"                                        
               "Execio * diskw "eddd" (finis stem o."                           
               o. = null                                                        
               end                                                              
            Address ISPExec                                                     
            save_tenter = tenter                                                
            tenter = null                                                       
            "Vput (tenter enrich)"                                              
            edtitle = "XMITIP Attachment"                                       
            "Control Display Save"                                              
            "Edit Dataset("create_dsn") Macro(xmitipem)" ,                      
               "profile(xmitip) Panel(xmitiped)"                                
            e_rc = rc                                                           
            "Control Display Restore"                                           
            tenter = save_tenter                                                
            "Vput tenter"                                                       
            Address TSO                                                         
                "Free ds("create_dsn")"                                         
            create_dsns = create_dsns create_dsn                                
            if e_rc > 3 then do                                                 
               say msgid "Ending per your request."                             
               exit e_rc                                                        
               end                                                              
            return                                                              
                                                                                
        /* ----------------------------------------------------- *              
         * Do PKZIP Routine                                      *              
         * ----------------------------------------------------- */             
         Do_Zip:                                                                
         zipcount = zipcount + 1                                                
         zip_dsn = "'"hlq".ZIPwork.zip"zipcount".ZIP'"                          
         if zip_method = null then method = "*"                                 
                              else method = zip_method                          
         if zippass  = null then password = "*"                                 
                            else password = zippass                             
         if fmt2l    = null then do                                             
            if mh_type = "ddn"                                                  
               then fmt2l = file_ddn""suffix                                    
               else do                                                          
                    if pos("(",save_file_dsn) > 0                               
                    then do                                                     
                         parse value save_file_dsn with "(" mem ")" .           
                         fmt2l = strip(mem)""suffix                             
                         end                                                    
                    else                                                        
                    fmt2l = strip(save_file_dsn,"B","'")""suffix                
                    end                                                         
            if confirm = null then                                              
               say msgid "zip file as:" fmt2l                                   
            end                                                                 
         if z_type   = null then z_type   = "ZIP"                               
         if zip_load = null then zip_load = "*"                                 
         if hlq      = null then hlq      = "*"                                 
         SAY ' TSO XMITIPZP'                                                    
         Address TSO                                                            
         "%xmitipzp" translate(file_dsn zip_dsn) ,                              
                     translate(zip_type zip_load) ,                             
                     z_type fmt2l password ,                                    
                     method zip_unit hlq debug                                  
         e_rc = rc                                                              
         SAY ' E_RC ON CALL OF XMITIPZP='e_rc                                   
         if e_rc > 0 then do                                                    
            say msgid "Error in zip processing for:" save_file_dsn              
            say msgid "Ending XMITIP."                                          
            call msg 'off'                                                      
            "Delete" file_dsn                                                   
            "Delete" zip_dsn                                                    
            exit 8                                                              
            end                                                                 
         file_dsn = zip_dsn                                                     
         SAY ' FILE_DSN NOW SET TO ZIP_DSN E_RC=' e_rc                          
         Address ISPExec                                                        
         if e_rc <> 0 then do                                                   
            say msgid "Error reading generated zip file:" file_dsn ,            
                      "Ending XMITIP."                                          
            exit 8                                                              
            end                                                                 
         return                                                                 
                                                                                
        /* ----------------------------------------------------- *              
         * Fix up the color specified.......                     *              
         * ----------------------------------------------------- */             
         Fix_Color: Procedure Expose msgid null                                 
         arg color                                                              
         Select                                                                 
              When abbrev("AQUA",color,1)    then newcolor = "Aqua"             
              When abbrev("BLACK",color,3)   then newcolor = "Black"            
              When abbrev("BLUE",color,3)    then newcolor = "Blue"             
              When abbrev("FUCHSIA",color,1) then newcolor = "Fuchsia"          
              When abbrev("GRAY",color,3)    then newcolor = "Gray"             
              When abbrev("GREEN",color,3)   then newcolor = "Green"            
              When abbrev("LIME",color,1)    then newcolor = "Lime"             
              When abbrev("MAROON",color,1)  then newcolor = "Maroon"           
              When abbrev("NAVY",color,1)    then newcolor = "Navy"             
              When abbrev("OLIVE",color,1)   then newcolor = "Olive"            
              When abbrev("PURPLE",color,1)  then newcolor = "Purple"           
              When abbrev("RED",color,1)     then newcolor = "Red"              
              When abbrev("SILVER",color,1)  then newcolor = "Silver"           
              When abbrev("TEAL",color,1)    then newcolor = "Teal"             
              When abbrev("WHITE",color,1)   then newcolor = "White"            
              When abbrev("YELLOW",color,1)  then newcolor = "Yellow"           
              When color = null then newcolor = null                            
              otherwise do                                                      
                        newcolor = null                                         
                        say msgid "Color specified:" color ,                    
                                  "is not a valid color. -",                    
                                  "Will use default colors."                    
                        say msgid "Valid colors are:"                           
                        say msgid "Color      Abbrev   Color     Abbrev"        
                        say msgid "Aqua       A        Navy      N     "        
                        say msgid "Black      Bla      Olive     O     "        
                        say msgid "Blue       Blu      Purple    P     "        
                        say msgid "Fuchsia    F        Red       R     "        
                        say msgid "Gray      Gra       Silver    S     "        
                        say msgid "Green     Gre       Teal      T     "        
                        say msgid "Lime      L         White     W     "        
                        say msgid "Maroon    M         Yellow    Y     "        
                        end                                                     
              end                                                               
            return newcolor                                                     
                                                                                
            /*                                                                  
            || =========================================================        
            || Routine:       RTFXlate    : Escapes characters within           
            ||                            : text                                
            || Arguments:     strData     : Data to scan                        
            || Return:        strData     : Updated data                        
            || Exposed vars:  (all)       : All                                 
            || ========================================================         
            */                                                                  
            RTFXlate:                                                           
            PARSE ARG strData                                                   
                                                                                
              /* ======================================================         
              || The characters we need to escape                               
              */                                                                
              strFrom = '{}\'                                                   
                                                                                
              /* ======================================================         
              || Loop, prefixing all above characters with a                    
              || a backslash (\)                                                
              */                                                                
              strOut = ""                                                       
              DO UNTIL numPos = 0                                               
                numPos =  Verify( strData, strFrom, "Match" )                   
                IF numPos <> 0 THEN DO                                          
                  strChar = Substr( strData, numPos, 1 )                        
                  PARSE VAR strData strLeft (strChar) strData                   
                  strOut = strOut || strLeft || "\" || strChar                  
                 END                                                            
               END                                                              
               strOut = strOut || strData                                       
                                                                                
               /* =====================================================         
               || Return escaped data                                           
               */                                                               
             RETURN strOut                                                      
                                                                                
        /* ----------------------------------------------------- *              
         * Exit message if an error.                             *              
         * ----------------------------------------------------- */             
        exit_8:                                                                 
        /*FEC 20010423: AtSign Support */                                       
        say msgid "The correct syntax for XMITIP (version)" ver "is: "          
        say msgid "%XMITIP user"||AtSign||"address"                             
        say msgid "     or (u1"||AtSign||"address u2"||AtSign||"address..) "    
        say msgid "     or *list-id* "                                          
        say msgid "     or * "                                                  
        say msgid "        AddressFile"                                         
        say msgid "        AddressFileDD"                                       
        say msgid "        BCC user"||AtSign||"address"                         
        say msgid "     or BCC (u1"||AtSign||"add1 u2"||AtSign||"add2 ..)"      
        say msgid "        CC user"||AtSign||"address"                          
        say msgid "     or CC (u1"||AtSign||"add1 u2"||AtSign||"add2 ..)"       
        say msgid "        FILE dsn"                                            
        say msgid "     or FILE (dsn1 dsn2 ...)  "                              
        say msgid "        FILEDD ddn1"                                         
        say msgid "     or FILEDD (ddn1 ddn2 ...)  "                            
        say msgid "        FILEDESC file-description "                          
        say msgid "     or FILEDESC (desc1 desc2 ...)"                          
        say msgid "        FILENAME filename"                                   
        say msgid "     or FILENAME (file1 file2 ..)"                           
        say msgid "        FILEO hfs-file-name "                                
        say msgid "     or FILEO (hfs-file-name1 hfs-file-name2 ..) "           
        say msgid "        FORMAT options (see the doc)"                        
        say msgid "        FROM from"||AtSign||"address"                        
        say msgid "        HLQ high-level-qualifier"                            
        say msgid "        HTML (for MSGDx only)"                               
        say msgid "        IMPORTANCE High Normal or Low"                       
        say msgid "        MARGIN Lm/Rm/Tm/Bm"                                  
        say msgid "     or MARGIN (Lm/Rm/Tm/Bm Lm/Rm/Tm/Bm ...)"                
        say msgid "        MSGDS data-set-name"                                 
        if sysvar('sysispf') = "ACTIVE" then                                    
           say msgid "     or MSGDS *"                                          
        say msgid "     or MSGDD ddname or MSGQ"                                
        say msgid "     or NOMSG (if no MSGDS, MSGDD or MSGQ)"                  
        say msgid "        Murphy"                                              
        say msgid "        NOConfirm"                                           
        say msgid "        PRIORITY Urgent Normal or Non-Urgent"                
        say msgid "        RECEIPT receipt"||AtSign||"address"                  
        say msgid "        REPLYTO reply"||AtSign||"address"                    
        say msgid "        SENSITIVITY Private Personal or Confidential"        
        say msgid "        SIG dsname or SIGDD ddname"                          
        say msgid "        SUBJECT 'subject text' "                             
        say msgid "        ZIPMETHOD zip-compression-method"                    
        say msgid "        ZIPPASS password for zip files"                      
        exit 8                                                                  
                                                                                
        /* ----------------------------------------------------- *              
         * Process each keyword here.                            *              
         * As each keyword and parameter are processed they are  *              
         * removed from the variable options.                    *              
         * ----------------------------------------------------- */             
                                                                                
        /* -------------------------- *                                         
         * SUBJECT Keyword first.     *                                         
         * -------------------------- */                                        
        Proc_Subject:                                                           
           if left(word(options,2),1) = "'" then do                             
              parse value options with x "'" subject "'" .                      
              qt = "'"                                                          
              end                                                               
           if left(word(options,2),1) = '"' then do                             
              parse value options with x '"' subject '"' .                      
              qt = '"'                                                          
              end                                                               
           /* now remove subject from options */                                
           lq = pos(qt,options,1)                                               
           options = overlay(" ",options,lq,1)                                  
           rq = pos(qt,options,1)                                               
           options = strip(delstr(options,1,rq))                                
                                                                                
           /* --------------------------------------------- *                   
            * Process the &JOB if it exists                 *                   
            * --------------------------------------------- */                  
           do while pos("&JOB",translate(subject)) > 0                          
              dp = pos("&JOB",translate(subject))                               
              if dp > 0 then                                                    
                 lsub = left(subject,dp-1)                                      
              else do                                                           
                   lsub = ""                                                    
                   dp = 0                                                       
                   end                                                          
              sl = length(subject)                                              
              rsub = right(subject,sl-dp+1)                                     
              key  = translate(word(rsub,1))                                    
              kl   = length(key)                                                
              rsub = substr(rsub,kl+1)                                          
              if pos(right(key,1),",)") > 0 then do                             
                 rkey = right(key,1)                                            
                 rsub = rkey""rsub                                              
                 key  = left(key,length(key)-1)                                 
                 end                                                            
              tcb     = storage(21c,4)                                          
              tiot    = storage(d2x(c2d(tcb)+12),4)                             
              jscb    = storage(d2x(c2d(tcb)+180),4)                            
              ssib    = storage(d2x(c2d(jscb)+316),4)                           
              jobname = strip(storage(d2x(c2d(tiot)),8))                        
              subject = lsub""jobname""rsub                                     
              end                                                               
                                                                                
           /* --------------------------------------------- *                   
            * Process the &SYSID if it exists               *                   
            * --------------------------------------------- */                  
           do while pos("&SYSID",translate(subject)) > 0                        
              dp = pos("&SYSID",translate(subject))                             
              if dp > 0 then                                                    
                 lsub = left(subject,dp-1)                                      
              else do                                                           
                   lsub = ""                                                    
                   dp = 0                                                       
                   end                                                          
              sl = length(subject)                                              
              rsub = right(subject,sl-dp+1)                                     
              key  = translate(word(rsub,1))                                    
              kl   = length(key)                                                
              rsub = substr(rsub,kl+1)                                          
              if pos(right(key,1),",)") > 0 then do                             
                 rkey = right(key,1)                                            
                 rsub = rkey""rsub                                              
                 key  = left(key,length(key)-1)                                 
                 end                                                            
              subject = lsub""mvsvar('sysname')""rsub                           
              end                                                               
                                                                                
           /* --------------------------------------------- *                   
            * Process the &TIME if it exists                *                   
            * --------------------------------------------- */                  
           do while pos("&TIME",translate(subject)) > 0                         
              dp = pos("&TIME",translate(subject))                              
              if dp > 0 then                                                    
                 lsub = left(subject,dp-1)                                      
              else do                                                           
                   lsub = ""                                                    
                   dp = 0                                                       
                   end                                                          
              sl = length(subject)                                              
              rsub = right(subject,sl-dp+1)                                     
              key  = translate(word(rsub,1))                                    
              kl   = length(key)                                                
              rsub = substr(rsub,kl+1)                                          
              if pos(right(key,1),",)") > 0 then do                             
                 rkey = right(key,1)                                            
                 rsub = rkey""rsub                                              
                 key  = left(key,length(key)-1)                                 
                 end                                                            
              subject = lsub""time()""rsub                                      
              end                                                               
                                                                                
           /* --------------------------------------------- *                   
            * Process the &DATE if it exists                *                   
            * --------------------------------------------- */                  
           do while pos("&DATE",translate(subject)) > 0                         
              dp = pos("&DATE",translate(subject))                              
              if dp > 0 then                                                    
                 lsub = left(subject,dp-1)                                      
              else do                                                           
                   lsub = ""                                                    
                   dp = 0                                                       
                   end                                                          
              sl = length(subject)                                              
              rsub = right(subject,sl-dp+1)                                     
              key  = translate(word(rsub,1))                                    
              kl   = length(key)                                                
              rsub = substr(rsub,kl+1)                                          
              if pos(right(key,1),",)") > 0 then do                             
                 rkey = right(key,1)                                            
                 rsub = rkey""rsub                                              
                 key  = left(key,length(key)-1)                                 
                 end                                                            
              if pos("-",key) > 0 then do                                       
                 parse value key with "&DATE-" n                                
                 d = date('B') - n                                              
                 end                                                            
              else d = date('b')                                                
              parse value date(,d,'b') with dd x y                              
              m = date('m',d,'b')                                               
              subject = lsub""m dd","y""rsub                                    
              end                                                               
                                                                                
           /* --------------------------------------------- *                   
            * Process the &DAY if it exists                 *                   
            * --------------------------------------------- */                  
           do while pos("&DAY",translate(subject)) > 0                          
              dp = pos("&DAY",translate(subject))                               
              if dp > 0 then                                                    
                 lsub = left(subject,dp-1)                                      
              else do                                                           
                   lsub = ""                                                    
                   dp = 0                                                       
                   end                                                          
              sl = length(subject)                                              
              rsub = right(subject,sl-dp+1)                                     
              key  = translate(word(rsub,1))                                    
              kl   = length(key)                                                
              rsub = substr(rsub,kl+1)                                          
              if pos(right(key,1),",)") > 0 then do                             
                 rkey = right(key,1)                                            
                 rsub = rkey""rsub                                              
                 key  = left(key,length(key)-1)                                 
                 end                                                            
              if pos("-",key) > 0 then do                                       
                 parse value key with "&DAY-" n                                 
                 d = date('B') - n                                              
                 end                                                            
              else d = date('b')                                                
              d = date('w',d,'b')                                               
              subject = lsub""d""rsub                                           
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * CC Keyword.                *                                         
         * 'Carbon Copy' recipients   *                                         
         *  CC id@node  or            *                                         
         *  CC (id1@node id2@node ..) *                                         
         * -------------------------- */                                        
        Proc_cc:                                                                
           p2 = wordindex(upper_options,2)                                      
           /* make the word CC upper case */                                    
           options = overlay("CC",options,1,2)                                  
           parse value options with "CC" data                                   
           data = strip(data)                                                   
           Select                                                               
              when left(data,1) = '"' then do                                   
                   pl   = pos(">",data)                                         
                   cc   = left(data,pl)                                         
                   end                                                          
              when left(data,1) = "'" then do                                   
                   pl   = pos(">",data)                                         
                   cc   = left(data,pl)                                         
                   end                                                          
              when left(data,1) = '(' then do                                   
                   pl   = pos(")",data)                                         
                   parse value data with "(" cc ")" .                           
                   end                                                          
              otherwise                                                         
                   cc = word(data,1)                                            
                   pl   = length(cc)                                            
           end                                                                  
           ropt = substr(options,p2+pl+1)                                       
           options = strip(ropt)                                                
           call process_address cc                                              
           cc = t_addrs                                                         
           do i = 1 to t_names.0                                                
              cc_n.i = strip(t_names.i)                                         
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * BCC Keyword.               *                                         
         * 'Blind Carbon Copy'        *                                         
         *  BCC id@node or            *                                         
         *  BCC (id1@node id2@node ..) *                                        
         * -------------------------- */                                        
        Proc_BCC:                                                               
           p2 = wordindex(upper_options,2)                                      
           /* make the word BCC upper case */                                   
           options = overlay("BCC",options,1,3)                                 
           parse value options with "BCC" data                                  
           data = strip(data)                                                   
           Select                                                               
              when left(data,1) = '"' then do                                   
                   pl   = pos(">",data)                                         
                   bcc  = left(data,pl)                                         
                   end                                                          
              when left(data,1) = "'" then do                                   
                   pl   = pos(">",data)                                         
                   bcc  = left(data,pl)                                         
                   end                                                          
              when left(data,1) = '(' then do                                   
                   pl   = pos(")",data)                                         
                   parse value data with "(" bcc ")" .                          
                   end                                                          
              otherwise                                                         
                   bcc = word(data,1)                                           
                   pl   = length(bcc)                                           
           end                                                                  
           ropt = substr(options,p2+pl+1)                                       
           options = strip(ropt)                                                
           call process_address bcc                                             
           bcc = t_addrs                                                        
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FROM Keyword.              *                                         
         * Optional From e-mail       *                                         
         * address.                   *                                         
         * -------------------------- */                                        
        Proc_From:                                                              
           p2 = wordindex(upper_options,2)                                      
           /* make the word FROM upper case */                                  
           options = overlay("FROM",options,1,4)                                
           parse value options with "FROM" data                                 
           data = strip(data)                                                   
           Select                                                               
              when left(data,1) = '"' then do                                   
                   pl   = pos(">",data)                                         
                   from = left(data,pl)                                         
                   end                                                          
              when left(data,1) = "'" then do                                   
                   pl   = pos(">",data)                                         
                   from = left(data,pl)                                         
                   end                                                          
              when left(data,1) = '(' then do                                   
                   pl   = pos(")",data)                                         
                   parse value data with "(" from ")" .                         
                   end                                                          
              otherwise                                                         
                   from = word(data,1)                                          
                   pl   = length(from)                                          
           end                                                                  
           ropt = substr(options,p2+pl+1)                                       
           options = strip(ropt)                                                
           call process_address from                                            
           from = strip(t_addrs)                                                
           from_n.1 = strip(t_names.1)                                          
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * MSGQ Keyword.              *                                         
         * Input is from the queue    *                                         
         * -------------------------- */                                        
        Proc_Msgq:                                                              
           options = delword(options,1,1)                                       
           msgq    = 1                                                          
           nomsg = "off"                                                        
           msgsub  = "MSGDS: input queue"                                       
           return                                                               
                                                                                
        /* ----------------------------------------------------- *              
         * MSG72 keyword                                         *              
         * use first 72 characters of each record                *              
         * ----------------------------------------------------- */             
        Proc_Msg72:                                                             
           options = delword(options,1,1)                                       
           msg72   = 1                                                          
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * MSGDS Keyword.             *                                         
         * Dataset containing the     *                                         
         * message to be sent.        *                                         
         * -------------------------- */                                        
        Proc_MsgDS:                                                             
           dsn = word(upper_options,2)                                          
           options = delword(options,1,2)                                       
           msgsub = "MSGDS:" dsn                                                
        /*FEC 20010423: AtSign Support */                                       
           if left(dsn,2) = "*"||AtSign then do                                 
              dsn = strip(substr(dsn,3))                                        
              debug = "on"                                                      
              if dsn = null then do                                             
                 nomsg = "off"                                                  
                 in.0 = 0                                                       
                 end                                                            
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * MSGDD Keyword.             *                                         
         * DDname for message text    *                                         
         * to be sent.                *                                         
         * -------------------------- */                                        
        Proc_MsgDD:                                                             
           if dsn = null then do                                                
                ddn = word(upper_options,2)                                     
                call listdsi(ddn "FILE")                                        
                if sysreason+0 <> 3 then                                        
                   if sysreason <> 27 then                                      
                if length(sysdsname) = 0 then do                                
                   say msgid "DDname:" ddn "Invalid - not allocated"            
                   say msgid "correct and retry."                               
                   exit 8                                                       
                   end                                                          
                options = delword(options,1,2)                                  
                msgsub = "MSGDD:" ddn                                           
                msgdd = 1                                                       
                end                                                             
           else do                                                              
           say msgid "Both MSGDS and MSGDD were specified,"                     
           say msgid "please correct your options and try again."               
           exit 8                                                               
           end                                                                  
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * SIG Keyword                *                                         
         * Dataset containing the     *                                         
         * message to be sent.        *                                         
         * -------------------------- */                                        
        Proc_Sig:                                                               
           sigdsn = word(upper_options,2)                                       
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * SIGDD Keyword              *                                         
         * DDname containing the      *                                         
         * message to be sent.        *                                         
         * -------------------------- */                                        
        Proc_SigDD:                                                             
           sigddn = word(upper_options,2)                                       
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * HLQ Keyword                *                                         
         * hql containing the         *                                         
         * message to be sent.        *                                         
         * -------------------------- */                                        
        Proc_hlq:                                                               
           hlq = word(upper_options,2)                                          
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * NOIDVAL Keyword.           *                                         
         * Indicates that no ID       *                                         
         * validation is to occur.    *                                         
         * -------------------------- */                                        
        Proc_NoIDVal:                                                           
           options = delword(options,1,1)                                       
           noidval = "off"                                                      
           ldap    = 1                                                          
           in.0  = 0                                                            
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * NOMSG Keyword.             *                                         
         * Indicates that no MSGDS    *                                         
         * or MSGDD is specified.     *                                         
         * -------------------------- */                                        
        Proc_NoMsg:                                                             
           options = delword(options,1,1)                                       
           nomsg = "off"                                                        
           in.0  = 0                                                            
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * NOCONFIRM Keyword.         *                                         
         * Turn off the confirmation  *                                         
         * message from this exec.    *                                         
         * -------------------------- */                                        
        Proc_NoConfirm:                                                         
           options = delword(options,1,1)                                       
           confirm = "off"                                                      
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * ASA Keyword.               *                                         
         * (affects attachments only  *                                         
         * -------------------------- */                                        
        Proc_ASA:                                                               
           options = delword(options,1,1)                                       
           printcc = "on"                                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * MACH Keyword.              *                                         
         * (affects attachments only  *                                         
         * -------------------------- */                                        
        Proc_Mach:                                                              
           options = delword(options,1,1)                                       
           printcc = "on"                                                       
           return                                                               
                                                                                
        /* ---------------------------- *                                       
         * ZIPMETHOD Keyword            *                                       
         * ZIP method                   *                                       
         * compression form to be       *                                       
         * used for all ZIP attachments *                                       
         * ---------------------------- */                                      
        Proc_ZipMethod:                                                         
           zip_method  = word(options,2)                                        
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* ---------------------------- *                                       
         * ZIPPASS Keyword              *                                       
         * ZIP Password                 *                                       
         * used for all ZIP attachments *                                       
         * ---------------------------- */                                      
        Proc_ZipPass:                                                           
           zippass  = word(options,2)                                           
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * IMPORTANCE Keyword.        *                                         
         * Optional importance        *                                         
         * -------------------------- */                                        
        Proc_Importance:                                                        
           importance = word(options,2)                                         
           options = delword(options,1,2)                                       
           test = translate(importance)                                         
           select                                                               
             when abbrev("HIGH",test,2)   then importance = "High"              
             when abbrev("LOW",test,2)    then importance = "Low"               
             when abbrev("NORMAL",test,2) then importance = "Normal"            
             otherwise nop;                                                     
             end                                                                
           test = translate(importance)                                         
           valid_importance = "HIGH LOW NORMAL"                                 
           if wordpos(test,valid_importance) = 0 then do                        
              say msgid "Invalid IMPORTANCE" importance "specified"             
              say msgid "valid values are:" valid_importance                    
              importance = null                                                 
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * PRIORITY Keyword.          *                                         
         * Optional priority          *                                         
         * -------------------------- */                                        
        Proc_Priority:                                                          
           priority = word(options,2)                                           
           test = translate(priority)                                           
           options = delword(options,1,2)                                       
           select                                                               
             when abbrev("URGENT",test,2) then priority = "Urgent"              
             when abbrev("HIGH",test,2)   then priority = "Urgent"              
             when abbrev("NON-URGENT",test,3) then                              
                  priority = "Non-Urgent"                                       
             when abbrev("LOW",test,2) then                                     
                  priority = "Non-Urgent"                                       
             when abbrev("NORMAL",test,3) then priority = "Normal"              
             otherwise nop;                                                     
             end                                                                
           test = translate(priority)                                           
           valid_priority = "URGENT NORMAL NON-URGENT"                          
           if wordpos(test,valid_priority) = 0 then do                          
              say msgid "Invalid PRIORITY" priority "specified"                 
              say msgid "valid values are:" valid_priority                      
              priority = null                                                   
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * SENSITIVITY Keyword.       *                                         
         * Optional sensitivity       *                                         
         * -------------------------- */                                        
        Proc_Sensitivity:                                                       
           sensitivity = word(options,2)                                        
           test = translate(sensitivity)                                        
           options = delword(options,1,2)                                       
           select                                                               
             when abbrev("CONFIDENTIAL",test,3) then                            
                  sensitivity = "Confidential"                                  
             when abbrev("COMPANY-CONFIDENTIAL",test,3) then                    
                  sensitivity = "Company-Confidential"                          
             when abbrev("PRIVATE",test,2) then                                 
                  sensitivity = "Private"                                       
             when abbrev("PERSONAL",test,3) then                                
                  sensitivity = "Personal"                                      
             otherwise nop;                                                     
             end                                                                
           test = translate(sensitivity)                                        
           valid_sensitivity = "PRIVATE PERSONAL CONFIDENTIAL",                 
               "COMPANY-CONFIDENTIAL"                                           
           if wordpos(test,valid_sensitivity) = 0 then do                       
              say msgid "Invalid SENSITIVITY" sensitivity "specified"           
              say msgid "valid values are:" valid_sensitivity                   
              sensitivity = null                                                
              end                                                               
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * REPLYTO Keyword.           *                                         
         * Optional reply e-mail      *                                         
         * address.                   *                                         
         * -------------------------- */                                        
        Proc_ReplyTo:                                                           
           p2 = wordindex(upper_options,2)                                      
           parse value options with x data                                      
           data = strip(data)                                                   
           Select                                                               
              when left(data,1) = '"' then do                                   
                   pl   = pos(">",data)                                         
                   replyto = left(data,pl)                                      
                   end                                                          
              when left(data,1) = "'" then do                                   
                   pl   = pos(">",data)                                         
                   replyto = left(data,pl)                                      
                   end                                                          
              when left(data,1) = '(' then do                                   
                   pl   = pos(")",data)                                         
                   parse value data with "(" replyto ")" .                      
                   end                                                          
              otherwise                                                         
                   replyto = word(data,1)                                       
                   pl   = length(replyto)                                       
           end                                                                  
           ropt = substr(options,p2+pl+1)                                       
           options = strip(ropt)                                                
           call process_address replyto                                         
           replyto = strip(t_addrs)                                             
           replyto_n.1 = strip(t_names.1)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * REPORT Keyword             *                                         
         * replaced by Format         *                                         
         * -------------------------- */                                        
        Proc_Report:                                                            
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" report ")" more                    
              /* now remove REPORT from options */                              
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                report = word(options,2)                                        
                options = delword(options,1,2)                                  
                end                                                             
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FORMAT Keyword             *                                         
         * -------------------------- */                                        
        Proc_Format:                                                            
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" format ")" more                    
              /* now remove FORMAT from options */                              
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                format = word(options,2)                                        
                options = delword(options,1,2)                                  
                end                                                             
           ww = words(format)                                                   
           if ww = 0 then return                                                
           do wc = 1 to ww                                                      
              call test_format word(format,wc)                                  
              end                                                               
           return                                                               
                                                                                
        /* --------------------------------------------------------- *          
         * Verify Valid Format                                       *          
         * --------------------------------------------------------- */         
         Test_Format: procedure expose msgid                                    
         parse arg fmt                                                          
         parse value fmt with format "/" .                                      
         format = translate(strip(format))                                      
         list = "TXT RTF HTML PDF BIN ZIP ZIPBIN ZIPRTF" ,                      
                "ZIPPDF ZIPHTML"                                                
         if wordpos(format,list) > 0 then return                                
         say msgid "Invalid format specified:" fmt                              
         say msgid "        must be one of the following:"                      
         say msgid "       " list                                               
         say msgid " "                                                          
         say msgid "XMITIP Processing terminating...."                          
         exit 8                                                                 
                                                                                
        /* -------------------------- *                                         
         * MARGIN Keyword             *                                         
         * -------------------------- */                                        
        Proc_Margin:                                                            
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" margin ")" more                    
              /* now remove MARGIN from options */                              
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                margin = word(options,2)                                        
                options = delword(options,1,2)                                  
                end                                                             
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * RECEIPT Keyword.           *                                         
         * -------------------------- */                                        
        Proc_Receipt:                                                           
           p2 = wordindex(upper_options,2)                                      
           parse value options with x data                                      
           data = strip(data)                                                   
           Select                                                               
              when left(data,1) = '"' then do                                   
                   pl   = pos(">",data)                                         
                   receipt = left(data,pl)                                      
                   end                                                          
              when left(data,1) = "'" then do                                   
                   pl   = pos(">",data)                                         
                   receipt = left(data,pl)                                      
                   end                                                          
              when left(data,1) = '(' then do                                   
                   pl   = pos(")",data)                                         
                   parse value data with "(" receipt ")" .                      
                   end                                                          
              otherwise                                                         
                   receipt = word(data,1)                                       
                   pl   = length(receipt)                                       
           end                                                                  
           ropt = substr(options,p2+pl+1)                                       
           options = strip(ropt)                                                
           call process_address receipt                                         
           receipt = strip(t_addrs)                                             
           receipt_n.1 = strip(t_names.1)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * HTML Keyword.              *                                         
         * -------------------------- */                                        
        Proc_HTML:                                                              
           options = delword(options,1,1)                                       
           enrich = "html"                                                      
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * MURPHY Keyword.            *                                         
         * -------------------------- */                                        
        Proc_Murphy:                                                            
           options = delword(options,1,1)                                       
           murphy = "on"                                                        
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * DEBUG Keyword.             *                                         
         * -------------------------- */                                        
        Proc_Debug:                                                             
           options = delword(options,1,1)                                       
           debug = "on"                                                         
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * ADDRESSFILE Keyword.       *                                         
         * -------------------------- */                                        
        Proc_AddressFile:                                                       
           address_file = word(options,2)                                       
           options = delword(options,1,2)                                       
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * ADDRESSFILE Setup          *                                         
         * -------------------------- */                                        
        Proc_AddressFile_Setup:                                                 
           if left(address_file,1) <> "'"                                       
              then address_file = "'"bhlq"."address_file"'"                     
           if "OK" <> sysdsn(address_file) then do                              
               say msgid address_file sysdsn(address_file)                      
               say msgid "correct and retry."                                   
               exit 8                                                           
               end                                                              
           "Alloc f("eddd") ds("address_file") shr reuse"                       
           "Execio * Diskr" eddd "(Finis Stem addr."                            
           do i = 1 to addr.0                                                   
              addr.i = strip(left(addr.i,72))                                   
              end                                                               
           "Free  f("eddd")"                                                    
           Call Process_Address_File                                            
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * ADDRESSFILEDD Keyword.     *                                         
         * -------------------------- */                                        
        Proc_AddressFileDD:                                                     
           address_filedd = word(options,2)                                     
           options = delword(options,1,2)                                       
           call listdsi(address_filedd "FILE")                                  
           if sysreason+0 <> 3 then                                             
              if sysreason+0 <> 27 then                                         
                 if length(sysdsname) = 0 then do                               
                    say msgid address_filedd "Invalid - not allocated"          
                    say msgid "correct and retry."                              
                    exit 8                                                      
                     end                                                        
           "Execio * Diskr" address_filedd "(Finis Stem addr."                  
           do i = 1 to addr.0                                                   
              addr.i = strip(left(addr.i,72))                                   
              end                                                               
           Call Process_Address_File                                            
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FILEDESC Keyword.          *                                         
         * -------------------------- */                                        
        Proc_FileDesc:                                                          
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" filedesc ")" x                     
              /* now remove FILEDESC from options */                            
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                filedesc = word(options,2)                                      
                options = delword(options,1,2)                                  
                end                                                             
           filedesc = strip(filedesc)                                           
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FILENAME Keyword.          *                                         
         * -------------------------- */                                        
        Proc_Filename:                                                          
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" filename ")" x                     
              /* now remove FILENAME from options */                            
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                filename = word(options,2)                                      
                options = delword(options,1,2)                                  
                end                                                             
           filename = strip(filename)                                           
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FILEO Keyword.             *                                         
         * -------------------------- */                                        
        Proc_Fileo:                                                             
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" fileo ")" x                        
              /* now remove FILEO from options */                               
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                fileo   = word(options,2)                                       
                options = delword(options,1,2)                                  
                end                                                             
           fileo = strip(fileo)                                                 
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FILEDD Keyword.            *                                         
         * -------------------------- */                                        
        Proc_FileDD:                                                            
           if pos("(",word(options,2)) > 0 then do                              
              parse value options with x "(" FILEDD ")" more                    
              /* now remove FILEDD from options */                              
              lq = pos("(",options,1)                                           
              options = overlay(" ",options,lq,1)                               
              rq = pos(")",options,1)                                           
              options = delstr(options,1,rq)                                    
              end                                                               
           else do                                                              
                FILEDD = word(options,2)                                        
                options = delword(options,1,2)                                  
                end                                                             
           return                                                               
                                                                                
        /* -------------------------- *                                         
         * FILE Keyword.              *                                         
         * Dsname for file to be      *                                         
         * sent as an attachment.     *                                         
         * (Text Only)                *                                         
         * -------------------------- */                                        
        Proc_File:                                                              
           options = strip(delword(options,1,1))                                
           if left(word(options,1),1) <> "(" then do                            
              fdsn = word(options,1)                                            
              options = strip(delword(options,1,1))                             
              file = fdsn                                                       
              end                                                               
            else do                                                             
                 lb = 0;rb = 0                                                  
                 do i = 1 to length(options)                                    
                    if substr(options,i,1) = "(" then lb = lb + 1               
                    if substr(options,i,1) = ")" then rb = rb + 1               
                    if rb = lb then leave                                       
                    end                                                         
                 work = left(options,i+1)                                       
                 options = substr(options,i+1)                                  
                 do i = 1 to words(work)                                        
                    file = strip(file word(work,i))                             
                    end                                                         
                 file = substr(file,2,length(file)-2)                           
                 end                                                            
         return                                                                 
                                                                                
        /* -------------------------- *                                         
         * XMZIP Keyword              *                                         
         * For testing                *                                         
         * (type library)             *                                         
         * -------------------------- */                                        
        Proc_XMZip:                                                             
           options = strip(delword(options,1,1))                                
         if left(options,1) = "(" then do                                       
            rp = pos(")",options)                                               
            work = left(options,rp)                                             
            parse value work with "(" work ")"                                  
            options = delstr(options,1,rq)                                      
            end                                                                 
         else do                                                                
              work = word(options,1)                                            
              options = delword(options,1,1)                                    
              end                                                               
         parse value work with zip_type zip_load                                
         return                                                                 
                                                                                
        /**************************************************************         
        * Trap uninitialized variables                                *         
        ***************************************************************/        
        Novalue:                                                                
        Say "Variable" ,                                                        
           condition("Description") "undefined in line" sigl":"                 
        Say sourceline(sigl)                                                    
        if sysvar("sysenv") <> "FORE" then exit 8                               
        say "Report the error in this application along with the",              
            "syntax used."                                                      
        exit 8                                                                  
